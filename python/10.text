https://replit.com/@oookwork/BlandSnappyNormalform#main.py

10. 파이썬을 이용한 시각화 1
판다스(pandas) 3 - 파일입출력/행열삽입삭제/결측치처리

# [Python]*******************************************************************************
해보기 10-1. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-3 06:23]
# ***************************************************************************************
# 시리즈 다루기
import pandas as pd

# 시리즈 만들기
s = pd.Series(['kimhycu', 159, 230])
s.index

# 시리즈 인덱스 지정
s.index = ['name', 'height', 'footsize']
# ---------------------------------------------------------------------------------------
name            kimhycu
height              159
footsize            230
dtype : object





# [Python]*******************************************************************************
해보기 10-2. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-3 07:14]
# ***************************************************************************************
import pandas as pd

s2 = pd.Series([10,20,30,40,50])
print('평균 : ', s2.mean())
print('최소값 : ', s2.min())
print('최대값 : ', s2.max())
print('중간값 : ', s2.median())
print('표준편차 : ', s2.std())
# ---------------------------------------------------------------------------------------
평균 :  30.0
최소값 :  10
최대값 :  50
중간값 :  30.0
표준편차 :  15.811388300841896





# [Python]*******************************************************************************
해보기 10-3. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-3 07:37]
# ***************************************************************************************
import numpy as np
import pandas as pd

s3 = pd.Series([1,3,10,4,30])
s3 = s3.replace(10,5)

# s3 정렬 (디폴트는 오름차순 : ascending=True)
s3.sort_values()
s3.sort_valuse(ascending=False)  # 내림차순
s3.to_frame()
# ---------------------------------------------------------------------------------------
0     1
1     3
2     5
3     4
4    30
dtype: int64
# ***************************************************************************************
import numpy as np
import pandas as pd

s3 = pd.Series([1, 3, 10, 4, 30])
s3 = s3.replace(10, 5)
print(s3)

# s3 정렬 (디폴트는 오름차순 : ascending=True)
s3.sort_values()
# s3.sort_valuse(ascending=False)  # 내림차순
# s3.to_frame()
# ---------------------------------------------------------------------------------------
0     1
1     3
2     5
3     4
4    30
dtype: int64





# [Python]*******************************************************************************
해보기 10-4. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
- data 폴더를 생성하고
- 강의자료실에 올려놓은 score.csv를 upload합시다.
[10-3 08:33]
# ***************************************************************************************
import pandas as pd

df = pd.read_csv('data/scores.csv')
df.head(3)
# ---------------------------------------------------------------------------------------
영상 10:35





# [Python]*******************************************************************************
해보기 10-5. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- 웹상에 있는 오픈소스(titanic.csv)를 자유롭게 다운로드 받고, jupyter notebook을 이용하여 파일의 내용을 살펴 봅시다.
[10-3 10:57]
# ***************************************************************************************
import numpy as np
import pandas as pd
df = pd.read_csv("URL")
df.head()
# ---------------------------------------------------------------------------------------
영상 12:09





# [Python]*******************************************************************************
해보기 10-7. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-3 12:18]
# ***************************************************************************************
# 1
import pandas as pd

df = pd.read_csv('data/scores.csv')
df.head(3)

# 2
s_name = df['name']  #df.name
s_name.head(3)

# 3
# 'name', 'python' 컬럼 데이터 추출하기
df_name_python = df[['name', 'python']]  # 데이터프레임 형태로 추출
df_name_python.head(3)

df_java = df[['java']]  # 데이터프레임 형태로 추출
df_java
# ---------------------------------------------------------------------------------------
영상 14:17





# [Python]*******************************************************************************
해보기 10-8. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-3 15:54]
# ***************************************************************************************
# 1
import pandas as pd

df = pd.read_csv('data/scores.csv')
df.head(3)

# db 점수가 100점인 데이터 (True or False)
df['db'] == 100

df[df['db'] == 100]
# 한 과목이라도 100을 받은 학생 추출
df[(df.python == 100) | (df.java == 100) | (df.db == 100)]

# python의 값이 60~90인 학생의 name, db 추출
df[(df['python'] >= 60) & (df['python'] <= 90)][['name', 'db']]
# ---------------------------------------------------------------------------------------
영상 18:10





# [Python]*******************************************************************************
해보기 10-9. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-3 20:05]
# ***************************************************************************************
import pandas as pd
df = pd.read_csv('data/scores.csv')

# 첫 번째 행 추출하기 - 시리즈 형태
df.iloc[0]

# 1,3,5번째 행 추출하기 - 데이터프레임 형태
df.iloc[[1,3,5]]

# 첫번째 행 추출하기(데이터프레임형태)
df.iloc[[0]]

# 1~3행 추출하기
df.iloc[1:4]

# 1,3,5행 슬라이스
df.iloc[1:6:2]

# 1행 추출하기
df.iloc[1:2]
# ---------------------------------------------------------------------------------------
영상 21:00





# [Python]*******************************************************************************
해보기 10-10. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-3 22:24]
# ***************************************************************************************
import pandas as pd
df = pd.read_csv('data/scores.csv')

# 마지막행 추출하기
df.iloc[-1]

# 0번째 행, 0번째 열
df.iloc[0,0]

# 0번째 행의 1,2열
df.iloc[0, [1,2]]

# 1,3,4번째 행 1열
df.iloc[[1,3,4], 1]

# 1,3,4번째 행 0,2열
df.iloc[[1,3,4],[0,2]]
# ---------------------------------------------------------------------------------------
영상 22:51





# [Python]*******************************************************************************
해보기 10-11. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-3 24:34]
# ***************************************************************************************
import pandas as pd

df = pd.read_csv('data/scores.csv')
df.head(3)

# 데이터프레임.tail(n)
# n을 생략하면 5개 행을 출력한다.
df.tail()
df.sample()  # n을 생략하면 1개의 sample 추출

# 데이터프레임.sample(frac=0.2) 지정한 비율의 샘플 출력
df.sample(frac=0.2)

# 컬럼명
df.columns

# 인덱스명
df.index

# 데이터프레임의 총 샘플 갯수, 컬럼 수, 컬럼 별 정보 등을 확인
df.info()
# ---------------------------------------------------------------------------------------
영상 25:35





# [Python]*******************************************************************************
해보기 10-12. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-3 26:39]
# ***************************************************************************************
import pandas as pd

df = pd.read_csv('data/scores.csv')

# 컬럼별 unique한 데이터 뽑기
# 컬럼.unique()
df['python'].unique()

# 컬럼의 유니크한 값의 갯수 보기
# 컬럼.value_countes()
df['python'].value_counts()

# 요약 통계보기
df.describe()

# 컬럼별 합, 평균 보기
df['python'].mean()
# ---------------------------------------------------------------------------------------
영상 27:00





# [Python]*******************************************************************************
해보기 10-13. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용하여
- data 폴더를 생성하고
- 강의 자료실에 올려놓은 life_expectancy.csv 를 upload 합시다.
[10-3 27:58]
# ***************************************************************************************
import pandas as pd

data = pd.read_csv('./data/life_expectancy.csv', encoding="CP949")
print(data)
print(data.head())
print(data.shape)

# padnas는 자동으로 df로 인식
# numpy 등 다른 데이터는 아래의 명령어로 배열 변경
df = pd.DataFrame(data)

# print(df)
print(df.head())
print(df.shape)

# 행 번호
print(df.index)

# 컬럼 이름
print(df.columns)

# 값만
print(df.values)
# ---------------------------------------------------------------------------------------
영상 28:34





# [Python]*******************************************************************************
해보기 10-14. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-3 30:13]
# ***************************************************************************************
import pandas as pd

df = pd.read_csv('./data/life_expectancy.csv', encoding="CP949")
print(df)

# 데이터프레임의 인덱싱
# 행:, 열:
print(df.iloc[:2,1:])

# 컬럼 삭제
df = df.drop('Status', axis=1)
print(df.head())
print(df.shape)

# 데이터프레임을 엑셀로 저장하는 기능
df.to_excel("./9_2.xlsx")
# ---------------------------------------------------------------------------------------
영상 31:20





# [Python]*******************************************************************************
해보기 10-15. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-4 13:51]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df.info()
# ---------------------------------------------------------------------------------------
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 891 entries, 0 to 890
Data columns (total 15 columns):
 #   Column       Non-Null Count  Dtype   
---  ------       --------------  -----   
 0   survived     891 non-null    int64   
 1   pclass       891 non-null    int64   
 2   sex          891 non-null    object  
 3   age          714 non-null    float64 
 4   sibsp        891 non-null    int64   
 5   parch        891 non-null    int64   
 6   fare         891 non-null    float64 
 7   embarked     889 non-null    object  
 8   class        891 non-null    category
 9   who          891 non-null    object  
 10  adult_male   891 non-null    bool    
 11  deck         203 non-null    category
 12  embark_town  889 non-null    object  
 13  alive        891 non-null    object  
 14  alone        891 non-null    bool    
dtypes: bool(2), category(2), float64(2), int64(4), object(5)
memory usage: 80.7+ KB





# [Python]*******************************************************************************
해보기 10-16. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-4 14:28]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df1 = df.copy()
df1['new'] = '0'
df1.head()

print(df1)
# ---------------------------------------------------------------------------------------
     survived  pclass     sex   age  sibsp  ...  deck  embark_town alive  alone new
0           0       3    male  22.0      1  ...   NaN  Southampton    no  False   0
1           1       1  female  38.0      1  ...     C    Cherbourg   yes  False   0
2           1       3  female  26.0      0  ...   NaN  Southampton   yes   True   0
3           1       1  female  35.0      1  ...     C  Southampton   yes  False   0
4           0       3    male  35.0      0  ...   NaN  Southampton    no   True   0
..        ...     ...     ...   ...    ...  ...   ...          ...   ...    ...  ..
886         0       2    male  27.0      0  ...   NaN  Southampton    no   True   0
887         1       1  female  19.0      0  ...     B  Southampton   yes   True   0
888         0       3  female   NaN      1  ...   NaN  Southampton    no  False   0
889         1       1    male  26.0      0  ...     C    Cherbourg   yes   True   0
890         0       3    male  32.0      0  ...   NaN   Queenstown    no   True   0

[891 rows x 16 columns]





# [Python]*******************************************************************************
해보기 10-17. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-4 15:13]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df1 = df.copy()
df1.drop(1)  # index로 삭제
df1.drop(df1.index[0:10])  # 여러 인덱스로 삭제
df1.drop(df1.index[[1,3,5,7,9]])

print(df1)
# ---------------------------------------------------------------------------------------
     survived  pclass     sex   age  sibsp  ...  adult_male  deck  embark_town alive  alone
0           0       3    male  22.0      1  ...        True   NaN  Southampton    no  False
1           1       1  female  38.0      1  ...       False     C    Cherbourg   yes  False
2           1       3  female  26.0      0  ...       False   NaN  Southampton   yes   True
3           1       1  female  35.0      1  ...       False     C  Southampton   yes  False
4           0       3    male  35.0      0  ...        True   NaN  Southampton    no   True
..        ...     ...     ...   ...    ...  ...         ...   ...          ...   ...    ...
886         0       2    male  27.0      0  ...        True   NaN  Southampton    no   True
887         1       1  female  19.0      0  ...       False     B  Southampton   yes   True
888         0       3  female   NaN      1  ...       False   NaN  Southampton    no  False
889         1       1    male  26.0      0  ...        True     C    Cherbourg   yes   True
890         0       3    male  32.0      0  ...        True   NaN   Queenstown    no   True

[891 rows x 15 columns]





# [Python]*******************************************************************************
해보기 10-18. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-4 16:16]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df1 = df.copy()

# 열 삭제 시 axis=1 반드시 붙여야 함
df1.drop('class', axis=1).head()
df1.drop(['who','deck','alive'], axis=1)

# 삭제된 내용을 원본에 적용 시
df1.drop(['who','deck','alive'], axis=1, inplace=True)

print(df1)
# ---------------------------------------------------------------------------------------
     survived  pclass     sex   age  ...   class  adult_male  embark_town  alone
0           0       3    male  22.0  ...   Third        True  Southampton  False
1           1       1  female  38.0  ...   First       False    Cherbourg  False
2           1       3  female  26.0  ...   Third       False  Southampton   True
3           1       1  female  35.0  ...   First       False  Southampton  False
4           0       3    male  35.0  ...   Third        True  Southampton   True
..        ...     ...     ...   ...  ...     ...         ...          ...    ...
886         0       2    male  27.0  ...  Second        True  Southampton   True
887         1       1  female  19.0  ...   First       False  Southampton   True
888         0       3  female   NaN  ...   Third       False  Southampton  False
889         1       1    male  26.0  ...   First        True    Cherbourg   True
890         0       3    male  32.0  ...   Third        True   Queenstown   True

[891 rows x 12 columns]





# [Python]*******************************************************************************
해보기 10-19. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-4 18:29]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df1 = df.copy()

# 열과 열 사이 연결
df1['family'] = df1['sibsp'] + df1['parch']  # 1,2등으로 표현
df1['gender'] = df1['who'] + '-' + df1['sex']  # woman femail 등으로 표현

# round : 반올림
df1['round'] = round(df1['fare'] / df1['age'], 2)  # 소수 둘째자리

print(df1)
# ---------------------------------------------------------------------------------------
     survived  pclass     sex   age  sibsp  ...  alive  alone family        gender round
0           0       3    male  22.0      1  ...     no  False      1      man-male  0.33
1           1       1  female  38.0      1  ...    yes  False      1  woman-female  1.88
2           1       3  female  26.0      0  ...    yes   True      0  woman-female  0.30
3           1       1  female  35.0      1  ...    yes  False      1  woman-female  1.52
4           0       3    male  35.0      0  ...     no   True      0      man-male  0.23
..        ...     ...     ...   ...    ...  ...    ...    ...    ...           ...   ...
886         0       2    male  27.0      0  ...     no   True      0      man-male  0.48
887         1       1  female  19.0      0  ...    yes   True      0  woman-female  1.58
888         0       3  female   NaN      1  ...     no  False      3  woman-female   NaN
889         1       1    male  26.0      0  ...    yes   True      0      man-male  1.15
890         0       3    male  32.0      0  ...     no   True      0      man-male  0.24

[891 rows x 18 columns]





# [Python]*******************************************************************************
해보기 10-20. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
- jupyter notebook을 이용해 봅시다.
[10-4 20:35]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df.info()
# ---------------------------------------------------------------------------------------
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 891 entries, 0 to 890
Data columns (total 15 columns):
 #   Column       Non-Null Count  Dtype   
---  ------       --------------  -----   
 0   survived     891 non-null    int64   
 1   pclass       891 non-null    int64   
 2   sex          891 non-null    object  
 3   age          714 non-null    float64 
 4   sibsp        891 non-null    int64   
 5   parch        891 non-null    int64   
 6   fare         891 non-null    float64 
 7   embarked     889 non-null    object  
 8   class        891 non-null    category
 9   who          891 non-null    object  
 10  adult_male   891 non-null    bool    
 11  deck         203 non-null    category
 12  embark_town  889 non-null    object  
 13  alive        891 non-null    object  
 14  alone        891 non-null    bool    
dtypes: bool(2), category(2), float64(2), int64(4), object(5)
memory usage: 80.7+ KB





# [Python]*******************************************************************************
연습문제 10-4. 9주차에서 살펴보았던 9_lab.csv 파일을 열고, 데이터를 자유롭게 분석해 봅시다.
[10-4 22:54]
# ***************************************************************************************
import numpy as np
import pandas as pd

df = pd.read_csv('9_lab.csv', encoding='cp949')
df.info()
# ---------------------------------------------------------------------------------------
영상 23:15
