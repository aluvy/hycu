14_02 [41:26]
연습문제1. 다음 코드를 설명해 봅시다.

import numpy as np

score = np.loadtxt("7_1.txt", delimiter=" ")  # default: 실수 형태로 불러옴

print(score)
for i in np.nditer(score):
  print(i)

- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_02 [43:27]





---------------------------------------------------------------------------------------------

14_02 [45:27]
연습문제2. 넘파이로 행렬을 자유롭게 생성해 봅시다.

import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a.shape)

b = np.array([[1, 2, 3], [4, 5, 6]])
print(b.shape)

- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(5,)
(2, 3)





---------------------------------------------------------------------------------------------

14_02 [45:37]
연습문제3. <결과>와 같이 n을 입력받아 n의 제곱수만큼 개수를 갖는 ㅎ애렬을 생성하는 코드를 작성해 봅시다. (numpy 이용)

import numpy as np


# 1. n의 제곱수 만큼의 수를 생성하여 2차원 배열 생성
def ndarray_create(n):
  return np.array(range(n**2)).reshape(n, n)


n = int(input("n:"))
print(ndarray_create(n))

- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_02 [47:20]
n:2
[[0 1]
 [2 3]]





---------------------------------------------------------------------------------------------

14_02 [47:53]
연습문제4. <결과>와 같이, 행과 열을 입력받아 1~100 사이의 임의의 수가 행렬의 원소가 되어 출력되도록 코드를 완성해 봅시다.

import random
import numpy as np


def make_array(n):
  a = np.array([])
  for i in range(n):
    a = np.append(a, random.randint(1, 100))
  return a


n1 = int(input("행: "))
n2 = int(input("열: "))
flat = n1 * n2
tmp = make_array(flat)
tmp = np.array(tmp).reshape(n1, n2)
print(tmp)

- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_02 [50:01]
행: 3
열: 4
[[94. 79. 55. 21.]
 [86. 27. 31. 70.]
 [45. 90. 32. 70.]]





---------------------------------------------------------------------------------------------

14_03 [12:32]
연습문제5. 다음의 코드에 대하여 설명해 봅시다.

import pandas as pd

s = pd.Series(range(5), index=["a", "b", "c", "d", "e"])
print(s[0])  # 인덱스

print(s[1])  # 인덱스
print(s["a"])  # 인덱스 라벨
print(s[0:3])  # 슬라이싱
print(s.a)  # 인덱스 라벨

- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_03 [14:18]

/home/runner/IdleYouthfulDecagons/main.py:4: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  print(s[0])  # 인덱스
0
/home/runner/IdleYouthfulDecagons/main.py:6: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  print(s[1])  # 인덱스
1
0
a    0
b    1
c    2
dtype: int64
0





---------------------------------------------------------------------------------------------

14_03 [14:22]
연습문제6. 다음의 코드에 대하여 설명해 봅시다.

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')

print('info\n------------------------\n')
df.info()

print('\n\nhead\n------------------------\n')
print(df.head())

print('\n\nage\n------------------------\n')
print(df['age'])

print('\n\nwho, fare\n------------------------\n')
print(df[['who', 'fare']])


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_03 [14:39]

info
------------------------

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 891 entries, 0 to 890
Data columns (total 15 columns):
 #   Column       Non-Null Count  Dtype   
---  ------       --------------  -----   
 0   survived     891 non-null    int64   
 1   pclass       891 non-null    int64   
 2   sex          891 non-null    object  
 3   age          714 non-null    float64 
 4   sibsp        891 non-null    int64   
 5   parch        891 non-null    int64   
 6   fare         891 non-null    float64 
 7   embarked     889 non-null    object  
 8   class        891 non-null    category
 9   who          891 non-null    object  
 10  adult_male   891 non-null    bool    
 11  deck         203 non-null    category
 12  embark_town  889 non-null    object  
 13  alive        891 non-null    object  
 14  alone        891 non-null    bool    
dtypes: bool(2), category(2), float64(2), int64(4), object(5)
memory usage: 80.7+ KB


head
------------------------

   survived  pclass     sex  ...  embark_town  alive  alone
0         0       3    male  ...  Southampton     no  False
1         1       1  female  ...    Cherbourg    yes  False
2         1       3  female  ...  Southampton    yes   True
3         1       1  female  ...  Southampton    yes  False
4         0       3    male  ...  Southampton     no   True

[5 rows x 15 columns]


age
------------------------

0      22.0
1      38.0
2      26.0
3      35.0
4      35.0
       ... 
886    27.0
887    19.0
888     NaN
889    26.0
890    32.0
Name: age, Length: 891, dtype: float64


who, fare
------------------------

       who     fare
0      man   7.2500
1    woman  71.2833
2    woman   7.9250
3    woman  53.1000
4      man   8.0500
..     ...      ...
886    man  13.0000
887  woman  30.0000
888  woman  23.4500
889    man  30.0000
890    man   7.7500

[891 rows x 2 columns]





---------------------------------------------------------------------------------------------

14_03 [15:25]
연습문제7. 다음의 코드에 대하여 설명해 봅시다.

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('iris')

print('[head]\n------------------------\n')
df.head()

print('\n\n[values]\n------------------------\n')
print(df.values)

print('\n\n[columns]\n------------------------\n')
print(df.columns)

print('\n\[index]\n------------------------\n')
print(df.index)

print('\n\[info]\n------------------------\n')
print(df.info())

print('\n\[size]\n------------------------\n')
print(df.size)

print('\n\[describe]\n------------------------\n')
print(df.describe())


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_03 [15:39]

[head]
------------------------

   sepal_length  sepal_width  ...  petal_width  species
0           5.1          3.5  ...          0.2   setosa
1           4.9          3.0  ...          0.2   setosa
2           4.7          3.2  ...          0.2   setosa
3           4.6          3.1  ...          0.2   setosa
4           5.0          3.6  ...          0.2   setosa

[5 rows x 5 columns]


[values]
------------------------

[[5.1 3.5 1.4 0.2 'setosa']
 [4.9 3.0 1.4 0.2 'setosa']
 [4.7 3.2 1.3 0.2 'setosa']
 [4.6 3.1 1.5 0.2 'setosa']
 [5.0 3.6 1.4 0.2 'setosa']
 [5.4 3.9 1.7 0.4 'setosa']
 [4.6 3.4 1.4 0.3 'setosa']
 [5.0 3.4 1.5 0.2 'setosa']
 [4.4 2.9 1.4 0.2 'setosa']
 [4.9 3.1 1.5 0.1 'setosa']
 [5.4 3.7 1.5 0.2 'setosa']
 [4.8 3.4 1.6 0.2 'setosa']
 [4.8 3.0 1.4 0.1 'setosa']
 [4.3 3.0 1.1 0.1 'setosa']
 [5.8 4.0 1.2 0.2 'setosa']
 [5.7 4.4 1.5 0.4 'setosa']
 [5.4 3.9 1.3 0.4 'setosa']
 [5.1 3.5 1.4 0.3 'setosa']
 [5.7 3.8 1.7 0.3 'setosa']
 [5.1 3.8 1.5 0.3 'setosa']
 [5.4 3.4 1.7 0.2 'setosa']
 [5.1 3.7 1.5 0.4 'setosa']
 [4.6 3.6 1.0 0.2 'setosa']
 [5.1 3.3 1.7 0.5 'setosa']
 [4.8 3.4 1.9 0.2 'setosa']
 [5.0 3.0 1.6 0.2 'setosa']
 [5.0 3.4 1.6 0.4 'setosa']
 [5.2 3.5 1.5 0.2 'setosa']
 [5.2 3.4 1.4 0.2 'setosa']
 [4.7 3.2 1.6 0.2 'setosa']
 [4.8 3.1 1.6 0.2 'setosa']
 [5.4 3.4 1.5 0.4 'setosa']
 [5.2 4.1 1.5 0.1 'setosa']
 [5.5 4.2 1.4 0.2 'setosa']
 [4.9 3.1 1.5 0.2 'setosa']
 [5.0 3.2 1.2 0.2 'setosa']
 [5.5 3.5 1.3 0.2 'setosa']
 [4.9 3.6 1.4 0.1 'setosa']
 [4.4 3.0 1.3 0.2 'setosa']
 [5.1 3.4 1.5 0.2 'setosa']
 [5.0 3.5 1.3 0.3 'setosa']
 [4.5 2.3 1.3 0.3 'setosa']
 [4.4 3.2 1.3 0.2 'setosa']
 [5.0 3.5 1.6 0.6 'setosa']
 [5.1 3.8 1.9 0.4 'setosa']
 [4.8 3.0 1.4 0.3 'setosa']
 [5.1 3.8 1.6 0.2 'setosa']
 [4.6 3.2 1.4 0.2 'setosa']
 [5.3 3.7 1.5 0.2 'setosa']
 [5.0 3.3 1.4 0.2 'setosa']
 [7.0 3.2 4.7 1.4 'versicolor']
 [6.4 3.2 4.5 1.5 'versicolor']
 [6.9 3.1 4.9 1.5 'versicolor']
 [5.5 2.3 4.0 1.3 'versicolor']
 [6.5 2.8 4.6 1.5 'versicolor']
 [5.7 2.8 4.5 1.3 'versicolor']
 [6.3 3.3 4.7 1.6 'versicolor']
 [4.9 2.4 3.3 1.0 'versicolor']
 [6.6 2.9 4.6 1.3 'versicolor']
 [5.2 2.7 3.9 1.4 'versicolor']
 [5.0 2.0 3.5 1.0 'versicolor']
 [5.9 3.0 4.2 1.5 'versicolor']
 [6.0 2.2 4.0 1.0 'versicolor']
 [6.1 2.9 4.7 1.4 'versicolor']
 [5.6 2.9 3.6 1.3 'versicolor']
 [6.7 3.1 4.4 1.4 'versicolor']
 [5.6 3.0 4.5 1.5 'versicolor']
 [5.8 2.7 4.1 1.0 'versicolor']
 [6.2 2.2 4.5 1.5 'versicolor']
 [5.6 2.5 3.9 1.1 'versicolor']
 [5.9 3.2 4.8 1.8 'versicolor']
 [6.1 2.8 4.0 1.3 'versicolor']
 [6.3 2.5 4.9 1.5 'versicolor']
 [6.1 2.8 4.7 1.2 'versicolor']
 [6.4 2.9 4.3 1.3 'versicolor']
 [6.6 3.0 4.4 1.4 'versicolor']
 [6.8 2.8 4.8 1.4 'versicolor']
 [6.7 3.0 5.0 1.7 'versicolor']
 [6.0 2.9 4.5 1.5 'versicolor']
 [5.7 2.6 3.5 1.0 'versicolor']
 [5.5 2.4 3.8 1.1 'versicolor']
 [5.5 2.4 3.7 1.0 'versicolor']
 [5.8 2.7 3.9 1.2 'versicolor']
 [6.0 2.7 5.1 1.6 'versicolor']
 [5.4 3.0 4.5 1.5 'versicolor']
 [6.0 3.4 4.5 1.6 'versicolor']
 [6.7 3.1 4.7 1.5 'versicolor']
 [6.3 2.3 4.4 1.3 'versicolor']
 [5.6 3.0 4.1 1.3 'versicolor']
 [5.5 2.5 4.0 1.3 'versicolor']
 [5.5 2.6 4.4 1.2 'versicolor']
 [6.1 3.0 4.6 1.4 'versicolor']
 [5.8 2.6 4.0 1.2 'versicolor']
 [5.0 2.3 3.3 1.0 'versicolor']
 [5.6 2.7 4.2 1.3 'versicolor']
 [5.7 3.0 4.2 1.2 'versicolor']
 [5.7 2.9 4.2 1.3 'versicolor']
 [6.2 2.9 4.3 1.3 'versicolor']
 [5.1 2.5 3.0 1.1 'versicolor']
 [5.7 2.8 4.1 1.3 'versicolor']
 [6.3 3.3 6.0 2.5 'virginica']
 [5.8 2.7 5.1 1.9 'virginica']
 [7.1 3.0 5.9 2.1 'virginica']
 [6.3 2.9 5.6 1.8 'virginica']
 [6.5 3.0 5.8 2.2 'virginica']
 [7.6 3.0 6.6 2.1 'virginica']
 [4.9 2.5 4.5 1.7 'virginica']
 [7.3 2.9 6.3 1.8 'virginica']
 [6.7 2.5 5.8 1.8 'virginica']
 [7.2 3.6 6.1 2.5 'virginica']
 [6.5 3.2 5.1 2.0 'virginica']
 [6.4 2.7 5.3 1.9 'virginica']
 [6.8 3.0 5.5 2.1 'virginica']
 [5.7 2.5 5.0 2.0 'virginica']
 [5.8 2.8 5.1 2.4 'virginica']
 [6.4 3.2 5.3 2.3 'virginica']
 [6.5 3.0 5.5 1.8 'virginica']
 [7.7 3.8 6.7 2.2 'virginica']
 [7.7 2.6 6.9 2.3 'virginica']
 [6.0 2.2 5.0 1.5 'virginica']
 [6.9 3.2 5.7 2.3 'virginica']
 [5.6 2.8 4.9 2.0 'virginica']
 [7.7 2.8 6.7 2.0 'virginica']
 [6.3 2.7 4.9 1.8 'virginica']
 [6.7 3.3 5.7 2.1 'virginica']
 [7.2 3.2 6.0 1.8 'virginica']
 [6.2 2.8 4.8 1.8 'virginica']
 [6.1 3.0 4.9 1.8 'virginica']
 [6.4 2.8 5.6 2.1 'virginica']
 [7.2 3.0 5.8 1.6 'virginica']
 [7.4 2.8 6.1 1.9 'virginica']
 [7.9 3.8 6.4 2.0 'virginica']
 [6.4 2.8 5.6 2.2 'virginica']
 [6.3 2.8 5.1 1.5 'virginica']
 [6.1 2.6 5.6 1.4 'virginica']
 [7.7 3.0 6.1 2.3 'virginica']
 [6.3 3.4 5.6 2.4 'virginica']
 [6.4 3.1 5.5 1.8 'virginica']
 [6.0 3.0 4.8 1.8 'virginica']
 [6.9 3.1 5.4 2.1 'virginica']
 [6.7 3.1 5.6 2.4 'virginica']
 [6.9 3.1 5.1 2.3 'virginica']
 [5.8 2.7 5.1 1.9 'virginica']
 [6.8 3.2 5.9 2.3 'virginica']
 [6.7 3.3 5.7 2.5 'virginica']
 [6.7 3.0 5.2 2.3 'virginica']
 [6.3 2.5 5.0 1.9 'virginica']
 [6.5 3.0 5.2 2.0 'virginica']
 [6.2 3.4 5.4 2.3 'virginica']
 [5.9 3.0 5.1 1.8 'virginica']]


[columns]
------------------------

Index(['sepal_length', 'sepal_width', 'petal_length', 'petal_width',
       'species'],
      dtype='object')

[index]
------------------------

RangeIndex(start=0, stop=150, step=1)


[info]
------------------------

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   sepal_length  150 non-null    float64
 1   sepal_width   150 non-null    float64
 2   petal_length  150 non-null    float64
 3   petal_width   150 non-null    float64
 4   species       150 non-null    object 
dtypes: float64(4), object(1)
memory usage: 6.0+ KB
None


[size]
------------------------

750


[describe]
------------------------

       sepal_length  sepal_width  petal_length  petal_width
count    150.000000   150.000000    150.000000   150.000000
mean       5.843333     3.057333      3.758000     1.199333
std        0.828066     0.435866      1.765298     0.762238
min        4.300000     2.000000      1.000000     0.100000
25%        5.100000     2.800000      1.600000     0.300000
50%        5.800000     3.000000      4.350000     1.300000
75%        6.400000     3.300000      5.100000     1.800000
max        7.900000     4.400000      6.900000     2.500000





---------------------------------------------------------------------------------------------

14_03 [17:07]
연습문제8. 다음의 코드에 대하여 설명해 봅시다.

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')

print('loc[100:]\n-------------------------')
print(df.loc[100:])
print('\n\n df.loc[:, :]\n-------------------------')
print(df.loc[:, :])

print('\n\n loc[2]\n-------------------------')
print(df.loc[2])  # 2행

print('\n\n loc[2, who]\n-------------------------')
print(df.loc[2, 'who'])  # 2행 who열

print('\n\n iloc[2:10]\n-------------------------')
print(df.iloc[2:10])  # 2행 ~ 10행
print('\n\n iloc[2:10][who]\n-------------------------')
print(df.iloc[2:10]['who'])  # 2행 ~ 10행까지의 who열

print('\n\n loc[800:, sex]\n-------------------------')
print(df.loc[800:, 'sex'])
print('\n\n loc[800:, :]\n-------------------------')
print(df.loc[800:, :])

print('\n\n loc[800:, [survived, sex]\n-------------------------')
print(df.loc[800:, ['survived', 'sex']])
print('\n\n iloc[800:, 5:]\n-------------------------')
print(df.iloc[800:, 5:])


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_03 [17:32]

loc[100:]
-------------------------
     survived  pclass     sex  ...  embark_town  alive  alone
100         0       3  female  ...  Southampton     no   True
101         0       3    male  ...  Southampton     no   True
102         0       1    male  ...  Southampton     no  False
103         0       3    male  ...  Southampton     no   True
104         0       3    male  ...  Southampton     no  False
..        ...     ...     ...  ...          ...    ...    ...
886         0       2    male  ...  Southampton     no   True
887         1       1  female  ...  Southampton    yes   True
888         0       3  female  ...  Southampton     no  False
889         1       1    male  ...    Cherbourg    yes   True
890         0       3    male  ...   Queenstown     no   True

[791 rows x 15 columns]


 df.loc[:, :]
-------------------------
     survived  pclass     sex  ...  embark_town  alive  alone
0           0       3    male  ...  Southampton     no  False
1           1       1  female  ...    Cherbourg    yes  False
2           1       3  female  ...  Southampton    yes   True
3           1       1  female  ...  Southampton    yes  False
4           0       3    male  ...  Southampton     no   True
..        ...     ...     ...  ...          ...    ...    ...
886         0       2    male  ...  Southampton     no   True
887         1       1  female  ...  Southampton    yes   True
888         0       3  female  ...  Southampton     no  False
889         1       1    male  ...    Cherbourg    yes   True
890         0       3    male  ...   Queenstown     no   True

[891 rows x 15 columns]


 loc[2]
-------------------------
survived                 1
pclass                   3
sex                 female
age                   26.0
sibsp                    0
parch                    0
fare                 7.925
embarked                 S
class                Third
who                  woman
adult_male           False
deck                   NaN
embark_town    Southampton
alive                  yes
alone                 True
Name: 2, dtype: object


 loc[2, who]
-------------------------
woman


 iloc[2:10]
-------------------------
   survived  pclass     sex  ...  embark_town  alive  alone
2         1       3  female  ...  Southampton    yes   True
3         1       1  female  ...  Southampton    yes  False
4         0       3    male  ...  Southampton     no   True
5         0       3    male  ...   Queenstown     no   True
6         0       1    male  ...  Southampton     no   True
7         0       3    male  ...  Southampton     no  False
8         1       3  female  ...  Southampton    yes  False
9         1       2  female  ...    Cherbourg    yes  False

[8 rows x 15 columns]


 iloc[2:10][who]
-------------------------
2    woman
3    woman
4      man
5      man
6      man
7    child
8    woman
9    child
Name: who, dtype: object


 loc[800:, sex]
-------------------------
800      male
801    female
802      male
803      male
804      male
        ...  
886      male
887    female
888    female
889      male
890      male
Name: sex, Length: 91, dtype: object


 loc[800:, :]
-------------------------
     survived  pclass     sex  ...  embark_town  alive  alone
800         0       2    male  ...  Southampton     no   True
801         1       2  female  ...  Southampton    yes  False
802         1       1    male  ...  Southampton    yes  False
803         1       3    male  ...    Cherbourg    yes  False
804         1       3    male  ...  Southampton    yes   True
..        ...     ...     ...  ...          ...    ...    ...
886         0       2    male  ...  Southampton     no   True
887         1       1  female  ...  Southampton    yes   True
888         0       3  female  ...  Southampton     no  False
889         1       1    male  ...    Cherbourg    yes   True
890         0       3    male  ...   Queenstown     no   True

[91 rows x 15 columns]


 loc[800:, [survived, sex]
-------------------------
     survived     sex
800         0    male
801         1  female
802         1    male
803         1    male
804         1    male
..        ...     ...
886         0    male
887         1  female
888         0  female
889         1    male
890         0    male

[91 rows x 2 columns]


 iloc[800:, 5:]
-------------------------
     parch      fare embarked  ...  embark_town alive  alone
800      0   13.0000        S  ...  Southampton    no   True
801      1   26.2500        S  ...  Southampton   yes  False
802      2  120.0000        S  ...  Southampton   yes  False
803      1    8.5167        C  ...    Cherbourg   yes  False
804      0    6.9750        S  ...  Southampton   yes   True
..     ...       ...      ...  ...          ...   ...    ...
886      0   13.0000        S  ...  Southampton    no   True
887      0   30.0000        S  ...  Southampton   yes   True
888      2   23.4500        S  ...  Southampton    no  False
889      0   30.0000        C  ...    Cherbourg   yes   True
890      0    7.7500        Q  ...   Queenstown    no   True

[91 rows x 10 columns]





---------------------------------------------------------------------------------------------

14_03 [20:51]
연습문제9. 다음의 코드에 대하여 설명해 봅시다.

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('iris')

print(df.info())

test1 = df['sepal_length'].mean()
print('\n df[sepal_length].mean() : ', test1)

test2 = df['sepal_length'].std()
print('\n df[sepal_length].std() : ', test2)

test3 = df['sepal_length'].min()
print('\n df[sepal_length].min() : ', test3)

test4 = df['sepal_length'].max()
print('\n df[sepal_length].max() : ', test4)


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_03 [21:14]

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   sepal_length  150 non-null    float64
 1   sepal_width   150 non-null    float64
 2   petal_length  150 non-null    float64
 3   petal_width   150 non-null    float64
 4   species       150 non-null    object 
dtypes: float64(4), object(1)
memory usage: 6.0+ KB
None

 df[sepal_length].mean() :  5.843333333333334

 df[sepal_length].std() :  0.828066127977863

 df[sepal_length].min() :  4.3

 df[sepal_length].max() :  7.9





---------------------------------------------------------------------------------------------

14_03 [21:58]
연습문제10. 다음의 코드에 대하여 설명해 봅시다.

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('iris')

print(df.info())

test1 = df['species'].unique()
print('\n df[species].unique() : ', test1)

test2 = df['species'].nunique()
print('\n df[species].nunique() : ', test2)

test3 = df['sepal_length'].value_counts()
print('\n df[sepal_length].value_counts() : ', test3)

test4 = df['sepal_length'].mode()
print('\n df[sepal_length].mode() : ', test4)


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_03 [22:35]

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   sepal_length  150 non-null    float64
 1   sepal_width   150 non-null    float64
 2   petal_length  150 non-null    float64
 3   petal_width   150 non-null    float64
 4   species       150 non-null    object 
dtypes: float64(4), object(1)
memory usage: 6.0+ KB
None

 df[species].unique() :  ['setosa' 'versicolor' 'virginica']

 df[species].nunique() :  3

 df[sepal_length].value_counts() :  sepal_length
5.0    10
5.1     9
6.3     9
5.7     8
6.7     8
5.8     7
5.5     7
6.4     7
4.9     6
5.4     6
6.1     6
6.0     6
5.6     6
4.8     5
6.5     5
6.2     4
7.7     4
6.9     4
4.6     4
5.2     4
5.9     3
4.4     3
7.2     3
6.8     3
6.6     2
4.7     2
7.6     1
7.4     1
7.3     1
7.0     1
7.1     1
5.3     1
4.3     1
4.5     1
7.9     1
Name: count, dtype: int64

 df[sepal_length].mode() :  0    5.0
Name: sepal_length, dtype: float64





---------------------------------------------------------------------------------------------

14_03 [23:40]
연습문제11. 다음의 코드에 대하여 설명해 봅시다.

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df = df['age'].to_numpy()

bins = pd.cut(df, 5)
print('bins\n------------------------\n', bins)

bins2 = pd.qcut(df, 5)
bins2.describe()
print('\n\n bins2\n------------------------\n', bins2)


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_03 [24:35]

bins
------------------------
 [(16.336, 32.252], (32.252, 48.168], (16.336, 32.252], (32.252, 48.168], (32.252, 48.168], ..., (16.336, 32.252], (16.336, 32.252], NaN, (16.336, 32.252], (16.336, 32.252]]
Length: 891
Categories (5, interval[float64, right]): [(0.34, 16.336] < (16.336, 32.252] < (32.252, 48.168] <
                                           (48.168, 64.084] < (64.084, 80.0]]


 bins2
------------------------
 [(19.0, 25.0], (31.8, 41.0], (25.0, 31.8], (31.8, 41.0], (31.8, 41.0], ..., (25.0, 31.8], (0.419, 19.0], NaN, (25.0, 31.8], (31.8, 41.0]]
Length: 891
Categories (5, interval[float64, right]): [(0.419, 19.0] < (19.0, 25.0] < (25.0, 31.8] <
                                           (31.8, 41.0] < (41.0, 80.0]]





---------------------------------------------------------------------------------------------

14_03 [25:00]
연습문제12. 다음의 코드에 대하여 설명해 봅시다.

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')

print('\n\n[test1]---------------------------\n')
test1 = df['age'].cumsum()
print(test1)

print('\n\n[test2]---------------------------\n')
test2 = df['age'].quantile(0.1)
print(test2)

print('\n\n[test3]---------------------------\n')
test3 = df.select_dtypes(include=[np.number]).corr()
print(test3)

print('\n\n[test4]---------------------------\n')
test4 = df.select_dtypes(include=[np.number]).corr()['survived']
print(test4)


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_03 [25:16]

[test1]---------------------------

0         22.00
1         60.00
2         86.00
3        121.00
4        156.00
         ...   
886    21128.17
887    21147.17
888         NaN
889    21173.17
890    21205.17
Name: age, Length: 891, dtype: float64


[test2]---------------------------

14.0


[test3]---------------------------

          survived    pclass  ...     parch      fare
survived  1.000000 -0.338481  ...  0.081629  0.257307
pclass   -0.338481  1.000000  ...  0.018443 -0.549500
age      -0.077221 -0.369226  ... -0.189119  0.096067
sibsp    -0.035322  0.083081  ...  0.414838  0.159651
parch     0.081629  0.018443  ...  1.000000  0.216225
fare      0.257307 -0.549500  ...  0.216225  1.000000

[6 rows x 6 columns]


[test4]---------------------------

survived    1.000000
pclass     -0.338481
age        -0.077221
sibsp      -0.035322
parch       0.081629
fare        0.257307
Name: survived, dtype: float64





---------------------------------------------------------------------------------------------

14_03 [26:04]
연습문제13. 다음의 코드를 작성하고 실행해 봅시다.

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df1 = df.copy()

print('\n\n[test1]---------------------------\n')
test1 = df1.drop(1)  # index로 삭제
print(test1)

print('\n\n[test2]---------------------------\n')
test2 = df1.drop(df1.index[0:10])  # 여러 개 인덱스로 삭제
print(test2)

print('\n\n[test3]---------------------------\n')
test3 = df1.drop(df1.index[[1, 3, 5, 7, 9]])
print(test3)


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_03 [26:30]

[test1]---------------------------

     survived  pclass     sex  ...  embark_town  alive  alone
0           0       3    male  ...  Southampton     no  False
2           1       3  female  ...  Southampton    yes   True
3           1       1  female  ...  Southampton    yes  False
4           0       3    male  ...  Southampton     no   True
5           0       3    male  ...   Queenstown     no   True
..        ...     ...     ...  ...          ...    ...    ...
886         0       2    male  ...  Southampton     no   True
887         1       1  female  ...  Southampton    yes   True
888         0       3  female  ...  Southampton     no  False
889         1       1    male  ...    Cherbourg    yes   True
890         0       3    male  ...   Queenstown     no   True

[890 rows x 15 columns]


[test2]---------------------------

     survived  pclass     sex  ...  embark_town  alive  alone
10          1       3  female  ...  Southampton    yes  False
11          1       1  female  ...  Southampton    yes   True
12          0       3    male  ...  Southampton     no   True
13          0       3    male  ...  Southampton     no  False
14          0       3  female  ...  Southampton     no   True
..        ...     ...     ...  ...          ...    ...    ...
886         0       2    male  ...  Southampton     no   True
887         1       1  female  ...  Southampton    yes   True
888         0       3  female  ...  Southampton     no  False
889         1       1    male  ...    Cherbourg    yes   True
890         0       3    male  ...   Queenstown     no   True

[881 rows x 15 columns]


[test3]---------------------------

     survived  pclass     sex  ...  embark_town  alive  alone
0           0       3    male  ...  Southampton     no  False
2           1       3  female  ...  Southampton    yes   True
4           0       3    male  ...  Southampton     no   True
6           0       1    male  ...  Southampton     no   True
8           1       3  female  ...  Southampton    yes  False
..        ...     ...     ...  ...          ...    ...    ...
886         0       2    male  ...  Southampton     no   True
887         1       1  female  ...  Southampton    yes   True
888         0       3  female  ...  Southampton     no  False
889         1       1    male  ...    Cherbourg    yes   True
890         0       3    male  ...   Queenstown     no   True

[886 rows x 15 columns]





---------------------------------------------------------------------------------------------

14_03 [27:16]
연습문제14. 다음의 코드를 작성하고 실행해 봅시다.

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df1 = df.copy()

# 열과 열사이 연결
df1['family'] = df1['sibsp'] + df1['parch']  # 1,2 등으로 표현
df1['gender'] = df1['who'] + '-' + df1['sex']  # woman femail 등으로 표현

# round : 반올림
df1['round'] = round(df1['fare'] / df1['age'], 2)  # 소수 둘째자리

df1.info()



- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_03 [27:50]

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 891 entries, 0 to 890
Data columns (total 18 columns):
 #   Column       Non-Null Count  Dtype   
---  ------       --------------  -----   
 0   survived     891 non-null    int64   
 1   pclass       891 non-null    int64   
 2   sex          891 non-null    object  
 3   age          714 non-null    float64 
 4   sibsp        891 non-null    int64   
 5   parch        891 non-null    int64   
 6   fare         891 non-null    float64 
 7   embarked     889 non-null    object  
 8   class        891 non-null    category
 9   who          891 non-null    object  
 10  adult_male   891 non-null    bool    
 11  deck         203 non-null    category
 12  embark_town  889 non-null    object  
 13  alive        891 non-null    object  
 14  alone        891 non-null    bool    
 15  family       891 non-null    int64   
 16  gender       891 non-null    object  
 17  round        714 non-null    float64 
dtypes: bool(2), category(2), float64(3), int64(5), object(6)
memory usage: 101.5+ KB





---------------------------------------------------------------------------------------------

14_04 [17:21]
연습문제15. 다음의 코드를 살펴봅시다.

# map, apply, lambda
import numpy as np
import pandas as pd

t = pd.Series(range(1, 50, 5), name='num')
print('t:\n', t, '\n')

t2 = t.map(lambda x: x * 3)
t3 = t.apply(lambda x: x * 3)

print('\n\n[t2]\n', t2)
print('\n\n[t3]\n', t3)


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

t:
 0     1
1     6
2    11
3    16
4    21
5    26
6    31
7    36
8    41
9    46
Name: num, dtype: int64 



[t2]
 0      3
1     18
2     33
3     48
4     63
5     78
6     93
7    108
8    123
9    138
Name: num, dtype: int64


[t3]
 0      3
1     18
2     33
3     48
4     63
5     78
6     93
7    108
8    123
9    138





---------------------------------------------------------------------------------------------

14_04 [17:52]
연습문제15. 다음의 코드를 살펴봅시다.

# groupby

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')

# 좌석 등급별 생존자 연령의 평균
test = df.groupby(['survived', 'pclass'])[['age']].mean()
print(test)


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_04 [18:17]
                       age
survived pclass           
0        1       43.695312
         2       33.544444
         3       26.555556
1        1       35.368197
         2       25.901566
         3       20.646118





---------------------------------------------------------------------------------------------

14_04 [18:29]
연습문제17. 다음의 코드를 살펴봅시다.

# groupby

import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')

# 성별, 좌석 등급별 생존자, 연령의 평균과 합.
test = df.groupby(['sex', 'pclass'])[['survived', 'age']].agg(['mean', 'sum'])
print('[test]\n', test)

test2 = df.groupby(['sex', 'pclass'])[['survived',
                                       'age']].agg([np.mean, np.sum])
print('\n\n[test2]\n', test2)


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_04 [18:44]

[test]
                survived            age         
                   mean sum       mean      sum
sex    pclass                                  
female 1       0.968085  91  34.611765  2942.00
       2       0.921053  70  28.722973  2125.50
       3       0.500000  72  21.750000  2218.50
male   1       0.368852  45  41.281386  4169.42
       2       0.157407  17  30.740707  3043.33
       3       0.135447  47  26.507589  6706.42
/home/runner/IdleYouthfulDecagons/main.py:14: FutureWarning: The provided callable <function mean at 0x7f13b779b370> is currently using SeriesGroupBy.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string "mean" instead.
  'age']].agg([np.mean, np.sum])
/home/runner/IdleYouthfulDecagons/main.py:14: FutureWarning: The provided callable <function sum at 0x7f13b779a440> is currently using SeriesGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string "sum" instead.
  'age']].agg([np.mean, np.sum])
/home/runner/IdleYouthfulDecagons/main.py:14: FutureWarning: The provided callable <function mean at 0x7f13b779b370> is currently using SeriesGroupBy.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string "mean" instead.
  'age']].agg([np.mean, np.sum])


[test2]
                survived            age         
                   mean sum       mean      sum
sex    pclass                                  
female 1       0.968085  91  34.611765  2942.00
       2       0.921053  70  28.722973  2125.50
       3       0.500000  72  21.750000  2218.50
male   1       0.368852  45  41.281386  4169.42
       2       0.157407  17  30.740707  3043.33
       3       0.135447  47  26.507589  6706.42





---------------------------------------------------------------------------------------------

14_04 [19:37]
연습문제18. 다음 코드를 살펴봅시다.

# pivot_table

import seaborn as sns
import pandas as pd

titanic = sns.load_dataset('titanic')

df = titanic[['who', 'age', 'pclass', 'sex', 'class', 'fare', 'survived']]
print('[info]\n')
df.info()

print('\n\n[test1]\n')
test1 = df.pivot_table(index='who', values='survived')  # 행의 값은 who
print(test1)

print('\n\n[test2]\n')
test2 = df.pivot_table(columns='who', values='survived')  # 열의 값이 who
print(test2)

print('\n\n[test3]\n')
test3 = df.pivot_table(index=['who', 'pclass'],
                       values='survived')  # 행의 값이 who와 pclass
print(test3)

print('\n\n[test4]\n')
test4 = df.pivot_table(index=['pclass', 'who'],
                       values='survived')  # 행의 값이 pclass와 who
print(test4)

print('\n\n[test5]\n')
test5 = df.pivot_table(index='pclass', columns='who',
                       values='survived')  # 행은 pclass, 열은 who
print(test5)

print('\n\n[test6]\n')
# 다중 집계함수 적용, pclass별 성별 생존자의 합과 평균
test6 = df.pivot_table(index='who',
                       columns='pclass',
                       values='survived',
                       aggfunc=['sum', 'mean'])
print(test6)


- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_04 [20:24]


[info]

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 891 entries, 0 to 890
Data columns (total 7 columns):
 #   Column    Non-Null Count  Dtype   
---  ------    --------------  -----   
 0   who       891 non-null    object  
 1   age       714 non-null    float64 
 2   pclass    891 non-null    int64   
 3   sex       891 non-null    object  
 4   class     891 non-null    category
 5   fare      891 non-null    float64 
 6   survived  891 non-null    int64   
dtypes: category(1), float64(2), int64(2), object(2)
memory usage: 42.9+ KB


[test1]

       survived
who            
child  0.590361
man    0.163873
woman  0.756458


[test2]

who          child       man     woman
survived  0.590361  0.163873  0.756458


[test3]

              survived
who   pclass          
child 1       0.833333
      2       1.000000
      3       0.431034
man   1       0.352941
      2       0.080808
      3       0.119122
woman 1       0.978022
      2       0.909091
      3       0.491228


[test4]

              survived
pclass who            
1      child  0.833333
       man    0.352941
       woman  0.978022
2      child  1.000000
       man    0.080808
       woman  0.909091
3      child  0.431034
       man    0.119122
       woman  0.491228


[test5]

who        child       man     woman
pclass                              
1       0.833333  0.352941  0.978022
2       1.000000  0.080808  0.909091
3       0.431034  0.119122  0.491228


[test6]

       sum              mean                    
pclass   1   2   3         1         2         3
who                                             
child    5  19  25  0.833333  1.000000  0.431034
man     42   8  38  0.352941  0.080808  0.119122
woman   89  60  56  0.978022  0.909091  0.491228





---------------------------------------------------------------------------------------------

14_04 [23:29]
연습문제19. 다음 코드를 살펴봅시다.

# concat

import pandas as pd

df1 = pd.DataFrame({'a': ['a0', 'a1', 'a2']}, index=[1, 2, 3])
df2 = pd.DataFrame({
    'a': ['a2', 'a3', 'a4'],
    'b': ['b2', 'b3', 'b4']
},
                   index=[2, 3, 4])

print('[df1]\n', df1)
print('\n\n[df2]\n', df2)

print('\n\n[test1]')
# 행 단위로 합치기 (상하)
test1 = pd.concat([df1, df2])
print(test1)

print('\n\n[test2]')
# 열 단위로 합치기 (좌우)
test2 = pd.concat([df1, df2], axis=1)
print(test2)

print('\n\n[test3]')
# 공통된 부분만 합치기
test3 = pd.concat([df1, df2], axis=1, join='inner')
print(test3)



- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_04 [24:02]

[df1]
     a
1  a0
2  a1
3  a2


[df2]
     a   b
2  a2  b2
3  a3  b3
4  a4  b4


[test1]
    a    b
1  a0  NaN
2  a1  NaN
3  a2  NaN
2  a2   b2
3  a3   b3
4  a4   b4


[test2]
     a    a    b
1   a0  NaN  NaN
2   a1   a2   b2
3   a2   a3   b3
4  NaN   a4   b4


[test3]
    a   a   b
2  a1  a2  b2
3  a2  a3  b3





---------------------------------------------------------------------------------------------

14_04 [26:02]
연습문제20. 다음 코드를 살펴봅시다.

# merge

import pandas as pd
import numpy as np

st = pd.DataFrame({
    'id': np.arange(5),
    'name': ['k', 'l', 'h', 'j', 'h'],
    'age': [20, 21, 23, 24, 25]
})

st_sub = pd.DataFrame({
    'id': [0, 1, 1, 4, 4, 5],
    'sub': ['p', 'c', 'c', 'j', 'p', 'p'],
    'score': [90, 90, 100, 90, 90, 90]
})

test1 = pd.merge(st, st_sub)
test2 = pd.merge(st, st_sub, on='id')
test3 = pd.merge(st, st_sub, on='id', how='left')

print('[test1]\n', test1)
print('\n\n[test2]\n', test2)
print('\n\n[test3]\n', test3)



- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_04 [26:13]

[test1]
    id name  age sub  score
0   0    k   20   p     90
1   1    l   21   c     90
2   1    l   21   c    100
3   4    h   25   j     90
4   4    h   25   p     90


[test2]
    id name  age sub  score
0   0    k   20   p     90
1   1    l   21   c     90
2   1    l   21   c    100
3   4    h   25   j     90
4   4    h   25   p     90


[test3]
    id name  age  sub  score
0   0    k   20    p   90.0
1   1    l   21    c   90.0
2   1    l   21    c  100.0
3   2    h   23  NaN    NaN
4   3    j   24  NaN    NaN
5   4    h   25    j   90.0
6   4    h   25    p   90.0






---------------------------------------------------------------------------------------------

14_04 [27:25]
연습문제21. 다음 코드를 살펴봅시다.

# merge

import pandas as pd

df1 = pd.DataFrame({'name': ['a', 'b', 'c'], 'dept': ['sw', 'comp', 'sw']})
df2 = pd.DataFrame({'name': ['a', 'b', 'c'], 'sal': [100, 200, 300]})

test1 = pd.merge(df1, df2)
test2 = pd.merge(df1, df2, how='outer')

print('[test1]\n', test1)
print('\n\n[test2]\n', test2)



- [결과] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
14_04 [27:36]

[test1]
   name  dept  sal
0    a    sw  100
1    b  comp  200
2    c    sw  300


[test2]
   name  dept  sal
0    a    sw  100
1    b  comp  200
2    c    sw  300

