https://replit.com/@oookwork/BlandSnappyNormalform#main.py

9. 파이썬을 이용한 데이터 분석 2
판다스(pandas) 2

# [Python]*******************************************************************************
해보기 9-1. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 22:44]
# ***************************************************************************************
import matplotlib as mpl
import matplotlib.pyplot as plt

plt.title("Plot")
plt.plot([1,4,9,16])
plt.show()
# ---------------------------------------------------------------------------------------
그래프





# [Python]*******************************************************************************
해보기 9-2. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 23:39]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

t = np.arange(0., 3., 0.2)
plt.title("multi line")
plt.plot(t, 0.2*t**2, 'r--', t, 0.3*t**3, 'bs:', t, 0.4*t**4, 'g^-')
plt.show()
# ---------------------------------------------------------------------------------------
그래프





# [Python]*******************************************************************************
해보기 9-3. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 24:51]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

X = np.linspace(-np.pi, np.pi, 256)
C, S = np.cos(X), np.sin(X)
plt.title("width legend")
plt.plot(X, C, ls="-.", label="cosine")
plt.plot(X, S, ls=":", label="sine")
plt.legend(loc=2)
plt.show()
# ---------------------------------------------------------------------------------------
그래프





# [Python]*******************************************************************************
해보기 9-4. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 26:02]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

X = np.linspace(-np.pi, np.pi, 256)
C, S = np.cos(X), np.sin(X)
plt.plot(X, C, label="cosine_values")
plt.xlabel("x_value")
plt.ylabel("y_value")
plt.title("x+value")
plt.show()
# ---------------------------------------------------------------------------------------
그래프





# [Python]*******************************************************************************
해보기 9-5. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 26:43]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

x = np.arange(-3, 10, 0.01)
y = x ** 4 - 10 * x ** 3 + 2 * x + 100
plt.plot(x,y)
plt.xlim(-3, 10)  # ★
plt.show()
# ---------------------------------------------------------------------------------------
그래프





# [Python]*******************************************************************************
해보기 9-6. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 27:05]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

x = np.arange(-5, 10, 0.01)
y = x**3 - 10 * x**2 + 6 * x + 100
plt.plot(x, y)
plt.xlim(0, 100)  # y축 범위 0 ~ 100으로 지정
plt.show()
# ---------------------------------------------------------------------------------------
그래프





# [Python]*******************************************************************************
해보기 9-7. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 27:36]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

plt.rcParams['font.family'] = 'Malgun Gothic'
plt.rcParams['axes.unicode_minus'] = False  # 한글 폰트 사용 시 - 부호의 깨짐 현상 해결
y = [2,3,1]
x = np.arange(len(y))

xlabel = ['가','나','다']
plt.title("Bar Chart")
plt.bar(x,y)
plt.xticks(x, xlabel)
plt.yticks(sorted(y))
plt.xlabel("가나다")
plt.ylabel("빈도 수")
plt.show()
# ---------------------------------------------------------------------------------------
막대 그래프





# [Python]*******************************************************************************
해보기 9-8. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 28:18]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

np.random.seed(0)
f1 = plt.figure(figsize=(10,2))
plt.title("random_value")
plt.plot(np.random.randn(100))
plt.show()
# ---------------------------------------------------------------------------------------
그래프





# [Python]*******************************************************************************
해보기 9-9. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 29:08]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

x1 = np.linspace(0.0, 5.0)
x2 = np.linspace(0.0, 2.0)
y1 = np.cos(2 * np.pi * x1) * np.exp(-x1)
y2 = np.cos(2 * np.pi * x2)

ax1 = plt.subplot(2, 1, 1)  # 전체 행렬(2행1열) 중 첫번째 플롯
plt.plot(x1, y2, 'yo-')
plt.title('sub plot 2*1')
plt.ylabel('y1_value')

ax2 = plt.subplot(2, 1, 2)  # 전체 행렬(2행1열) 중 두번째 플롯
plt.plot(x2, y2, 'r.-')
plt.xlabel('x_value')
plt.ylabel('y2_value')
# plt.right_layout()
plt.show()
# ---------------------------------------------------------------------------------------
그래프 2개





# [Python]*******************************************************************************
해보기 9-10. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 29:49]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

np.random.seed(0)

plt.subplot(221)
plt.plot(np.random.rand(5))
plt.title("axes 1")

plt.subplot(222)
plt.plot(np.random.rand(5))
plt.title("axes 2")

plt.subplot(223)
plt.plot(np.random.rand(5))
plt.title("axes 3")

plt.subplot(224)
plt.plot(np.random.rand(5))
plt.title("axes 4")

plt.tight_layout()
plt.show()
# ---------------------------------------------------------------------------------------
그래프 4개





# [Python]*******************************************************************************
해보기 9-11. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 30:40]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

np.random.seed(0)
x = np.random.randn(1000)
plt.title("Histogram")
patches = plt.hist(x, bins=10)
plt.show()
# ---------------------------------------------------------------------------------------
그래프





# [Python]*******************************************************************************
해보기 9-12. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 31:12]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import numpy as np

N = 30
np.random.seed(0)
x = np.random.rand(N)
y1 = np.random.rand(N)
y2 = np.random.rand(N)
y3 = np.pi * (15 * np.random.rand(N)) ** 2
plt.title("scatter_example")
plt.scatter(x, y1, c=y2, s=y3)
plt.show()
# ---------------------------------------------------------------------------------------
버블 그래프





# [Python]*******************************************************************************
해보기 9-13. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 31:53]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
from sklearn.datasets import load_digits

digits = load_digits()

X = digits.images[1]
plt.title("mnist digits; 1")
plt.imshow(X, interpolation='nearest', cmap=plt.cm.bone_r)
plt.xticks([])
plt.yticks([])
plt.grid(False)
plt.subplots_adjust(left=0.35, right=0.65, bottom=0.35, top=0.65)
plt.show()
# ---------------------------------------------------------------------------------------
그림





# [Python]*******************************************************************************
해보기 9-14. 다음의 코드를 작성하고, 실행결과를 확인해 봅시다.
[9-2 34:34]
# ***************************************************************************************
import matplotlib as mlp
import matplotlib.pyplot as plt
import seaborn as sns

iris = sns.load_dataset("iris")         # 붓꽃 데이터
titanic = sns.load_dataset("titanic")   # 타이타닉호 데이터
tips = sns.load_dataset("tips")         # 팁 데이터
flights = sns.load_dataset("flights")   # 여객운송 데이터
sns.countplot(x="day", data=tips)
plt.title("count")  # 요일별 팁을 준 횟수
plt.show()
# ---------------------------------------------------------------------------------------
그래프





# [Python]*******************************************************************************
해보기 9-15. 다음 코드를 설명해 봅시다.
[9-3 20:18]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df.info()
df.head()
df['who']
df[['sex','fare']]
df['who'][:5]
df.loc[100:]
df.loc[:,:]
# ---------------------------------------------------------------------------------------
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 891 entries, 0 to 890
Data columns (total 15 columns):
 #   Column       Non-Null Count  Dtype   
---  ------       --------------  -----   
 0   survived     891 non-null    int64   
 1   pclass       891 non-null    int64   
 2   sex          891 non-null    object  
 3   age          714 non-null    float64 
 4   sibsp        891 non-null    int64   
 5   parch        891 non-null    int64   
 6   fare         891 non-null    float64 
 7   embarked     889 non-null    object  
 8   class        891 non-null    category
 9   who          891 non-null    object  
 10  adult_male   891 non-null    bool    
 11  deck         203 non-null    category
 12  embark_town  889 non-null    object  
 13  alive        891 non-null    object  
 14  alone        891 non-null    bool    
dtypes: bool(2), category(2), float64(2), int64(4), object(5)
memory usage: 80.7+ KB





# [Python]*******************************************************************************
해보기 9-16. 다음 코드를 설명해 봅시다.
[9-3 21:00]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
print(df.loc[2])  # 2행
print(df.loc[2, 'who'])  # 2행 who열

df.iloc[2:10]  # 2행~10행
df.iloc[2:10]['who']  # 2행~10행까지의 who열

df.loc[800:, 'sex']
df.loc[800:, :]
df.loc[800:, ['survived', 'sex']]
df.iloc[800:, 5:]
#print(df[df['who']=='woman'])  # 조건부 추출
# ---------------------------------------------------------------------------------------
survived                 1
pclass                   3
sex                 female
age                   26.0
sibsp                    0
parch                    0
fare                 7.925
embarked                 S
class                Third
who                  woman
adult_male           False
deck                   NaN
embark_town    Southampton
alive                  yes
alone                 True
Name: 2, dtype: object
woman





# [Python]*******************************************************************************
해보기 9-17. 다음 코드를 작성하고 실행해 봅시다.
[9-3 33:54]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
# df['age'].mean()
# df['age'].std()
# df['age'].min()
df['age'].max()
# ---------------------------------------------------------------------------------------
80.0





# [Python]*******************************************************************************
해보기 9-18. 다음 코드를 작성하고 실행해 봅시다.
[9-3 44:04]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df['age'].median()
# df['age'].sum()
# df['age'].cumsum()
# ---------------------------------------------------------------------------------------
28.0





# [Python]*******************************************************************************
해보기 9-19
[9-4 00:23]
# ***************************************************************************************
import pandas as pd
s = pd.Series(range(5), index=["a","b","c","d","e"])
print(s[0])  # 인덱스

print(s[1])     # 인덱스
print(s["a"])   # 인덱스 라벨
print(s[0:3])   # 슬라이싱
print(s.a)      # 인덱스 라벨
# ---------------------------------------------------------------------------------------
0
1
0
a    0
b    1
c    2
dtype: int64
0





# [Python]*******************************************************************************
해보기 9-20
[9-4 00:54]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df.info()
df.head()
df['age']
df[['who', 'fare']]
# ---------------------------------------------------------------------------------------
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 891 entries, 0 to 890
Data columns (total 15 columns):
 #   Column       Non-Null Count  Dtype   
---  ------       --------------  -----   
 0   survived     891 non-null    int64   
 1   pclass       891 non-null    int64   
 2   sex          891 non-null    object  
 3   age          714 non-null    float64 
 4   sibsp        891 non-null    int64   
 5   parch        891 non-null    int64   
 6   fare         891 non-null    float64 
 7   embarked     889 non-null    object  
 8   class        891 non-null    category
 9   who          891 non-null    object  
 10  adult_male   891 non-null    bool    
 11  deck         203 non-null    category
 12  embark_town  889 non-null    object  
 13  alive        891 non-null    object  
 14  alone        891 non-null    bool    
dtypes: bool(2), category(2), float64(2), int64(4), object(5)
memory usage: 80.7+ KB





# [Python]*******************************************************************************
해보기 9-21
[9-4 01:37]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df.loc[100:]
df.loc[:, :]

print(df.loc[2])            # 2행
print(df.loc[2, 'who'])     # 2행 who열
df.iloc[2:10]               # 2행~10행
df.iloc[2:10]['who']        # 2행~10행 까지의 who열
df.loc[800:, 'sex']
df.loc[800:, :]
df.loc[800:, ['survived', 'sex']]
df.iloc[800:, 5:]
# ---------------------------------------------------------------------------------------
survived                 1
pclass                   3
sex                 female
age                   26.0
sibsp                    0
parch                    0
fare                 7.925
embarked                 S
class                Third
who                  woman
adult_male           False
deck                   NaN
embark_town    Southampton
alive                  yes
alone                 True
Name: 2, dtype: object
woman





# [Python]*******************************************************************************
해보기 9-22
[9-4 02:10]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')

print(df.loc[2])  # 2행
print(df.loc[2, 'who'])  # 2행 who열

df.iloc[2:10]  # 2행~10행
df.iloc[2:10]['who']  # 2행~10행 까지의 who열
df.loc[800:, 'sex']
df.loc[800:, :]
df.loc[800:, ['survived', 'sex']]
df.iloc[800:, 5:]
# print(df[df['who']=='woman'])  # 조건부 추출
# ---------------------------------------------------------------------------------------
survived                 1
pclass                   3
sex                 female
age                   26.0
sibsp                    0
parch                    0
fare                 7.925
embarked                 S
class                Third
who                  woman
adult_male           False
deck                   NaN
embark_town    Southampton
alive                  yes
alone                 True
Name: 2, dtype: object
woman
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')

print(df.loc[2])  # 2행
print(df.loc[2, 'who'])  # 2행 who열

df.iloc[2:10]  # 2행~10행
df.iloc[2:10]['who']  # 2행~10행 까지의 who열
df.loc[800:, 'sex']
df.loc[800:, :]
df.loc[800:, ['survived', 'sex']]
df.iloc[800:, 5:]
print(df[df['who'] == 'woman'])  # 조건부 추출
# ---------------------------------------------------------------------------------------
survived                 1
pclass                   3
sex                 female
age                   26.0
sibsp                    0
parch                    0
fare                 7.925
embarked                 S
class                Third
who                  woman
adult_male           False
deck                   NaN
embark_town    Southampton
alive                  yes
alone                 True
Name: 2, dtype: object
woman
     survived  pclass     sex   age  sibsp  ...  adult_male  deck  embark_town alive  alone
1           1       1  female  38.0      1  ...       False     C    Cherbourg   yes  False
2           1       3  female  26.0      0  ...       False   NaN  Southampton   yes   True
3           1       1  female  35.0      1  ...       False     C  Southampton   yes  False
8           1       3  female  27.0      0  ...       False   NaN  Southampton   yes  False
11          1       1  female  58.0      0  ...       False     C  Southampton   yes   True
..        ...     ...     ...   ...    ...  ...         ...   ...          ...   ...    ...
880         1       2  female  25.0      0  ...       False   NaN  Southampton   yes  False
882         0       3  female  22.0      0  ...       False   NaN  Southampton    no   True
885         0       3  female  39.0      0  ...       False   NaN   Queenstown    no  False
887         1       1  female  19.0      0  ...       False     B  Southampton   yes   True
888         0       3  female   NaN      1  ...       False   NaN  Southampton    no  False

[271 rows x 15 columns]





# [Python]*******************************************************************************
해보기 9-23
[9-4 02:51]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('iris')
df.head()
df.values
df.columns
df.index
df.info()
df.size
df.describe()
# ---------------------------------------------------------------------------------------
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   sepal_length  150 non-null    float64
 1   sepal_width   150 non-null    float64
 2   petal_length  150 non-null    float64
 3   petal_width   150 non-null    float64
 4   species       150 non-null    object 
dtypes: float64(4), object(1)
memory usage: 6.0+ KB





# [Python]*******************************************************************************
해보기 9-24
[9-4 03:19]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('iris')
print(df.info())
df['sepal_lengh'].mean()
df['sepal_lengh'].std()
df['sepal_lengh'].min()
df['sepal_lengh'].max()
# ---------------------------------------------------------------------------------------
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   sepal_length  150 non-null    float64
 1   sepal_width   150 non-null    float64
 2   petal_length  150 non-null    float64
 3   petal_width   150 non-null    float64
 4   species       150 non-null    object 
dtypes: float64(4), object(1)
memory usage: 6.0+ KB
None
5.8433333333335





# [Python]*******************************************************************************
해보기 9-25
[9-4 03:52]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('iris')
print(df.info())
print(df['species'].unique())
# print(df['species'].nunique())
# print(df['sepal_length'].value_counts())
# print(df['sepal_length'].mode())
# ---------------------------------------------------------------------------------------
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   sepal_length  150 non-null    float64
 1   sepal_width   150 non-null    float64
 2   petal_length  150 non-null    float64
 3   petal_width   150 non-null    float64
 4   species       150 non-null    object 
dtypes: float64(4), object(1)
memory usage: 6.0+ KB
None
['setosa' 'versicolor' 'virginica']





# [Python]*******************************************************************************
해보기 9-26
[9-4 04:57]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
df = df['age']
bins = pd.cut(df,5)
print(bins)

bins2 = pd.qcut(df,5)
bins2.describe()
print(bins2)
# ---------------------------------------------------------------------------------------
영상 05:14





# [Python]*******************************************************************************
해보기 9-27
[9-4 05:16]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
print(pd.cut(df['age'],bins=3))
print(pd.qcut(df['age'],3))
# ---------------------------------------------------------------------------------------
영상 05:28





# [Python]*******************************************************************************
해보기 9-28
[9-4 05:28]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')

df['age'].cumsum()
df['age'].quantile(0.1)
df.corr()
df.corr()['survived']
# ---------------------------------------------------------------------------------------
영상 05:49





# [Python]*******************************************************************************
해보기 9-29
[9-4 06:46]
# ***************************************************************************************
import numpy as np
import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')
age = df['age']
print(age.isnull().sum())
age = age.replace(np.nan,26)
print(age.head())

# 정렬 (디폴트는 오름차순 : ascending=True)
age.sort_valuse()
age.sort_valuse(ascending=False)  # 내림차순
age.to_frame()
# ---------------------------------------------------------------------------------------
177
0    22.0
1    38.0
2    26.0
3    35.0
4    35.0
Name: age, dtype: float64





# [Python]*******************************************************************************
연습문제 9-1. 서울시 교통공사_지하철혼잡도 공공데이터에 대하여 설명해 봅시다.
- 강의자료실 : 9_lab.csv
- https://www.data.go.kr/data/15071311/fileData.do
[9-4 12:28]
# ***************************************************************************************
import numpy as np
import pandas as pd

df = pd.read_scv('data#9_lab.csv', encoding='co949')





# [Python]*******************************************************************************
연습문제 9-2. 9_lab.csv 파일을 이용ㄴ하여 다음의 내용을 분석해 봅시다.
- 파일의 정보 확인
- '역명' 컬럼에 대하여, 인덱싱, 슬라이싱
- 역명이 '서울역'인 경우, 데이터들을 추출
[9-4 15:00]
# ***************************************************************************************





# [Python]*******************************************************************************
연습문제 9-3. seaborn의 titanic 파일을 이용하여 다음의 내용을 분석해 봆디ㅏ.
- 파일의 정보 확인
- 열별 슬라이싱
- 데이터 빈도 분석 등
[9-4 15:24]
# ***************************************************************************************
