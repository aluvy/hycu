09. 데이터를 논리적으로 처리하기

-------------------------------------------------------------
09_02. 집합의 기초
-------------------------------------------------------------

[2페이지]

이번 차시에는 데이터를 논리적으로 처리하는 방법에 대해서 알아보도록 하겠습니다.
쉽게 간단하게 말씀드리면 집합에 대해서 알아보겠다는 것입니다.
이번 차시에는 집합의 기초를 먼저 다루고 그다음에 집합 유형 데이터 처리 프로그래밍을 하는 방법에 대해서 알아보도록 하겠습니다.
이번 차시를 통해서 여러분은 집합 연산에 대해서 설명을 하실 수 있고 집합 유형의 데이터 처리 프로그램을 코딩을 하실 수 있게 될 것입니다.

첫 번째 시간을 시작하겠습니다.
집합의 기초에 대해서 말씀을 드리죠.
집합은 수학적으로 정의를 한다면 확정적이고 독립적인 객체들의, 그것을 이제 원소라고 하는데 그 원소들의 모임이라고 정의를 하고 있습니다.
원소의 속성과 도메인이 일정하고 잘 정의가 됐다는 것을 전제조건으로 하고 있습니다.
예를 들어서 정수의 집합을 보겠습니다.

그림을 보시면 0이 중심에 있고 마이너스 무한대 또는 플러스 무한대로 뻗어 있는 숫자들의 모임이라고 할 수 있죠.
그 숫자들은 1씩 차이가 나는 숫자들의 모임입니다.
0, 1, 2, 3, 4 또는 0, -1, -2, -3, -4 등등 그렇게 확정적인 또 그 정의가 잘되어 있는 숫자들의 모임이죠.
그리고 이 숫자를 하나하나 1, 2, 3 등의 숫자들 하나하나는 독립적이고 서로 구별을 할 수 있는 존재들입니다.
이런 원소들의 모임을 집합이라고 이야기를 하는 것입니다.

파이썬에서는 집합을 어떻게 정의하는지 보겠습니다.
집합을 불가변성 유형 객체인 원소들의 모임이라고 정의를 하고 있습니다.
우리가 불가변성 또는 가변성이라는 개념의 차이를 이미 다루어보았었죠.
불가변성은 한번 정해지면 그것이 끝까지 같은 값을 유지하고 같은 위치를 유지하고 변하지 않는 것.
가변성이라고 함은 값이 변할 수 있다는 것을 의미한다고 우리가 알아보았습니다.

가변적인 유형의 객체는 집합의 원소가 될 수가 없다는 것도 기억을 해둘 필요가 있습니다.
또 원소의 유형은 즉 데이터 타입은 다양할 수 있습니다.
앞에서 우리가 수학적으로 정수의 집합이라고 정의를 했을 때는 그것은 정수만이 모여 있는 집합이다 할 수 있습니다.
그리고 또 집합 중에서도 사람의 모임이다 또는 그 사람 중에서도 이름의 모임이다 할 때에는 그 사람의 모임이다 할 때에는 어떨까요?

사람은 나이도 갖고 있고 이름도 갖고 있고 주소도 갖고 있고 또 자기의 사회적인 식별을 할 수 있도록 사회 보장 번호라든지 또는 주민등록번호를 가지고 있죠.
이런 다양한 유형 또는 다양한 속성을 가진 객체들로서 한 사람을 표현하고 그 사람들 하나하나를 원소로 해서 집합이 되도록 할 수가 있는 것입니다.

파이썬도 마찬가지입니다.
여러 속성을 가진 데이터들의 모임을 만들고자 하기 때문에 그 데이터 각각은 리스트가 될 수도 있고 튜플이 될 수도 있고 또는 스트링이 될 수도 있고 또는 정수나 소수가 될 수도 있는 여러 유형을 가진 그런 객체들로서 모임으로서 집합이 만들어질 수 있는 것입니다.

하나의 set, a set을 본다면 그 안에는 1도 들어갈 수 있고 -3도 들어갈 수 있고 1, 2, 3이라는 스트링도 들어갈 수 있고 또 1과 2와 3의 튜플이 들어갈 수도 있고 3.1이 들어갈 수도 있고 여러 유형의 객체들이 들어갈 수 있습니다.
다만 여러 유형의 객체들이 들어가 있지만 이 유형은 논리적으로 일정한 뜻, 일정한 정의를 할 수가 있어야 되는 것입니다.

이런 것들이 사람의 속성을 의미한다, 또는 어떤 사물의 속성을 의미한다 하는 일정한 정의를 할 수 있을 때 집합이 존재하는 것입니다.
그런 정의 수학적인 개념을 떠나서 우리가 프로그래밍 언어로서 정의된 집합을 본다면 다양한 유형의 객체들이 모여 있구나, 라고 이제 생각을 할 수가 있다는 것입니다.
공집합에 대해서 보겠습니다.

공집합은 수학적인 정의로써는 원소가 하나도 없는 집합을 뜻합니다.
파이썬도 역시 수학적인 정의와 똑같은 개념으로써 정의를 하고 있습니다.
그다음에 원소의 수를 보겠습니다.
이것을 카디널리티라고 이야기를 하는데 수학적인 정의에서는 집합의 원소의 개수입니다.
그 기호로써는 집합 이름 양옆에 수직 바를 2개를 세워놓은 것으로써 카디널리티를 표현을 하고 있습니다.

예를 들어서 A라는 집합이 1, 2, 3이라고 하는 3개의 원소를 가지고 있다면 A의 카디널리티 즉 A의 양옆에 수직 바가 2개가 서 있죠.
그것은 3이라고 값을 매길 수가 있는 것입니다.
파이썬도 역시 마찬가지입니다.
집합의 원소의 개수를 수학적인 정의와 마찬가지로 그 카디널리티로써 그 원소의 수를 집합의 수로, 크기로 정의하고 있는 것입니다.

멱집합을 보겠습니다.
파워 셋이라고 하는데 수학적인 정의로써는 어느 한 집합의 부분집합들을 원소로 가진 집합을 그 집합의 멱집합이라고 이야기를 합니다.
멱이라고 하는 것은 자승을 뜻합니다.
한자로 멱이라고 하는데 우리가 생각하는 이런 멱이 아닙니다.
자승, 제곱이라는 뜻을 가지고 있는 것이 멱집합입니다.

기호로 봐서는 P 괄호 그 속에 그 집합을 넣고 있습니다.
즉 A라는 집합에 모든 부분집합을 가지고 있는 모든 부분집합들을 원소로 해서 이루어진 집합이 바로 P라고 하는 멱집합이 되는 것입니다.
이 멱집합의 원소의 수는 몇 개가 될까요?
그것은 바로 이 A의 카디널리티의 2제곱이라고 볼 수가 있습니다.
2의 A의 카디널리티 승이라고 볼 수가 있는 것이죠.

예를 보겠습니다.
A는 1, 2, 3이라는 3개의 원소로써 정수라고 하죠.
자연수라고 할 수도 있고 자연수 3개로써 이루어진 집합입니다.
이때 |P(A)|라고 하는 것은 공집합 1 그다음에 2, 그다음에 3 이런 것들이 전부 1의 부분집합들이죠.
그다음에 2개씩 짝지어진 집합도 역시 A의 부분집합입니다.

조금 이따가 부분집합에 대한 개념을 다시 우리가 다루겠는데 그 부분집합이라고 하는 것은 어떤 집합이 가지고 있는 원소들로만 이루어진 집합.
다 긁어내서 집합을 이루어놓아도 그것은 부분집합이 될 것이고 어떤 집합이 가지고 있는 원소들의 일부만 가지고 이루어진 집합을 또 그 집합의 부분집합이라고 이야기를 하는 것입니다.

그런 정의로써 따지다 보니까 원소가 아무것도 없다 하는 공집합도 부분집합이 되는 것이고 하나만 있을 경우에도 1, 2, 3 부분집합이 되는 것이고 1과 2, 2와 3 그다음에 1과 3.
이런 2개씩 이루어진 것도 부분집합이 되는 것이고 1, 2, 3이라는 그 자체도 부분집합이 되는 것입니다.
이런 모든 부분집합을 모아서 A의 멱집합 |P(A)|가 되는 것입니다.

파이썬의 정의는 어떻게 하는지 보겠습니다.
수학적인 정의와 동일합니다.
단 구현과 표현 방식은 다르다는 것만 우리가 조금 유의하면 되겠고 이런 개념들은 앞에서부터 나중에까지 지금 제가 현재 이후, 앞으로 설명 드린 모든 부분들이 대부분 파이썬과 수학적인 정의는 동일하게 이루어지고 있다는 것을 또 기억을 해 주시면 좋겠습니다.

집합 그 자체에 대한 정의를 말씀을 드린 것입니다.
그렇다면 수학적인 이런 집합들을 어떻게 구성하는지 그것도 역시 정의를 하는 한 방법이 되겠죠.
그런 집합을 구성하는 수학적인 방법은 무엇인가.
첫 번째가 원소 나열 방식이라고 하는 것입니다.
S라는 집합이 있다면 중괄호 열고 중괄호를 닫고
그 사이에는 sequence of element values separated by comma 이런 콤마로 구분, 구분, 구분지어진 각각의 원소들이 쭉 나열되어 있는 것으로써 그다음에 그런 원소들의 나열을 중괄호로써 열고 닫고 한 자체가 하나의 수학적으로 집합을 명시적으로 또는 문자적으로 리터러리라고 이야기를 하죠.
문자적으로 정의를 한 형태가 되는 것입니다.

예를 들어서 그 밑에 바로 나와 있습니다.
1과 2와 K와 10이라고 하는 4개의 원소를 각자 3개 콤마로 구별을 했죠.
그리고 양옆에 중괄호로써 그 집합의 한계를 규정을 하고 있는 그 형태가 이 S라는 집합의 문자적인 정의 형태 또는 원소 나열 방식이라고 하는 것입니다.
그다음에 원소의 속성을 기술하는 방법이 있습니다.
기술이라는 것은 디스크립트 한다, 설명한다.
또는 프레디케이트 한다는 것입니다.
서술한다 하는 것입니다.

S는 X라는 원소들의 모임으로 되어 있다.
그런데 수직 바가 서 있습니다.
X라고 하는 것은 수직 바의 오른쪽과 같은 성질을 가진 놈들이라고 X의 속성을 설명해 주는 문장이 또는 수식이 그 오른쪽에 들어오게 되는 것입니다.
그것을 영어로써 그냥 expression predicating the properties of x라고 표현을 했습니다.
그 밑에 예를 보겠습니다.

X는 Z에 포함된다.
Z의 원소이다.
그리고 여기에 꺾은 괄호가 위를 향하게 서 있는 것은 앤드의 기호입니다.
0보다는 크고 10 이하인 X이다.
Z라고 하는 우리가 수학에서 볼 때 인테저 즉 정수의 모든 집합을 뜻하고 있습니다.
앞에서 우리가 보았던 그 인테저 집합의 실제 이름이 관례적입니다, 이거는.
Z라고 쓰기도 하고 I라고 쓰기도 하는데 대부분의 경우에는 Z를 많이 사용을 합니다.

그 뜻을 다시 한 번 해석을 해보면 S는 X라고 하는 원소들로써 이루어지는데 그 X는 어떤 속성을 가지고 있냐 하면 일단 정수여야 한다.
그리고 그 크기의 범위는 1부터 10까지 들어가는 즉 1, 2, 3, 4, 5, 6, 7, 8, 9, 10에 해당하는 정수로써 이루어진 집합이라는 것을 속성 기술 방식으로 정의를 한 것입니다.
이제 파이썬의 집합 생성 방식을 비교해서 한번 살펴보겠습니다.
원소 나열 방식은 수학적인 방식과 동일한 방식입니다.

S는 중괄호 열고 1, 2, 등등해서 10까지 나가서 중괄호를 닫아주고 있죠.
원소 속성 기술 방식을 또 보겠습니다.
수학적인 방법과 유사하며 이것을 조금 다른 말로 컴프리핸션 또는 이해 또는 포괄적 방식이라고 이야기를 합니다.
포괄적으로 두루뭉술하게 이런 속성을 가진 원소들이라고 설명을 하는 것이기 때문에 파이썬과 같은 프로그래밍 랭귀지에서는 컴프리핸션이라고 이야기를 하는 것입니다.
set라고 하는 이 집합 유형 생성자가 있습니다.

그 set는 하나의 함수입니다.
함수인데 그 속에 좀 특이한 형태의 인수가 들어가 있습니다.
x for x in range(1, 11)이라는 형태의 일종의 익스프레션, 즉 수식이 들어가 있는 것이죠.
x는 x인데 수직 바는 없어요.
거기에다가 살짝 여러분이 수직 바가 있다고 생각을 해보시면 모든 x들인데 어떤 x들이냐 하면 레인지 1부터 10까지.

즉 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 레인지라고 하는 함수는 왼쪽에 있는 것은 스타트도 뒤에 있는 것은 엔드인데 엔드 마이너스 1까지만 실제적인 값을 내놓는 이터레이팅 함수라고 말씀을 드린 적이 있죠.
그런 범위, 즉 이터레이션의 반복적인 어떤 값들의 나열 속에 있는 x들에 대해서 원소로 가지는 그런 x들을 원소로 가지는 집합이 a라고 파이썬이 정의를 하는 것입니다.

이런 이해 방식으로써의 집합 정의는 조금 이따가 실습 과정에서 다시 한 번 자세하게 살펴보겠습니다.
지금까지 집합에 대해서 기본적인 정의를 했었고 그다음에 집합에 대한 또 기본적인 연산을 하는 방법에 대해서 우리가 살펴봤는데 이제는 집합 간의 관계에 대해서 살펴보도록 하겠습니다.
지금까지 집합에 대해서, 여러 종류의 집합에 대해서 정의를 했고요.

이제 집합들 사이의 관계에 대해서 알아보겠습니다.
원소의 포함 관계를 보겠는데요.
수학적인 정의로써는 객체 x가 집합 S의 원소라는 것을 x는 S에 포함된다고 표현을 하고 있습니다.
삼지창 같은 모양이 옆으로 누워져 있죠.
이런 모습으로 표현한다 하는 것입니다.
파이썬의 정의는 기호야 물론 다르겠지만 그 의미는 수학적인 정의와 동일합니다.

부분집합과 상위집합에 대해서 알아보겠습니다.
수학적인 정의는 집합 A의 모든 원소가 집합 B에도 있으면 A를 B의 부분집합이라고 하고 B를 A의 상위집합이라고 이야기를 합니다.
기호로써는 조금 전에 원소의 포함 관계를 표현하는 기호와 좀 유사하기는 한데 U를 옆으로 뉘어놓은 거고 밑에 또 줄이 하나 더 그어져 있습니다.
그런데 포함되는 쪽으로 U가 열려있습니다.
이런 형태로 기호를 표현을 합니다.

예를 들어서 A는 0, 1, 2, 3, B는 0, 1, 2, 3, 4, 5, 6, 7이라고 하는 정수들의 집합이라고 하면 보시면 A의 모든 원소 0, 1, 2, 3이 B에도 그대로 속해 있죠?
그러나 B에 있는 5, 6, 7이라고 하는 원소는 A에 없습니다.
이런 경우에는 A는 B의 부분집합이라고 표현을 하는 것입니다.
그다음에 반대로 B는 A를 포함해서 그 외에도 다른 원소도 가지고 있기 때문에 B는 A보다 더 커.
그러니까 B는 A보다 큰 슈퍼집합, 슈퍼셋이라 할 수 있는 것입니다.

파이썬의 정의도 수학적인 정의와 동일합니다.
동일한 집합을 보겠습니다.
두 집합 A와 B의 원소가 모두 같은 값이면 두 집합이 동일하다고 이야기를 합니다.
기호로써는 = 기호를 써서 표현을 해 줍니다.
예를 들어서 A도 1, 2, 3 B도 1, 2, 3이면 이때 A와 B는 같다는 것입니다.

그림으로 표현하면 동일한 집합 1, 2, 3이라고 하는 하나의 집합이 있으면 거기에 이름이 A도 될 수 있고 B도 될 수 있는 형태로 붙어 있는 거나 마찬가지로 생각을 할 수 있다고 그림이 설명을 하는 것입니다.
파이썬의 정의는 수학적인 정의와 동일합니다.
그러나 같다는 것은 표현하는 것은 = 하나만 있는 기호가 아니고 예를 들면 더블 이퀄 즉, 동일함이라는 기호로써 표현을 하겠죠.

이런 점이 조금씩 차이가 있을 뿐이지 기본적인 개념은 같다고 할 수 있습니다.
합집합에 대해서 수학적인 정의는 두 집합 A와 B의 원소로 구성된 집합이라고 하고 있습니다.
셋 상의 합도 합집합은 역시 동일하게 정의를 할 수 있습니다.
지금까지 우리가 살펴보았던 모든 집합의 관계는 단 2개, A와 B만 가지고 관계를 따지는 것은 아닙니다.

A, B, C 또는 그 이상 10개가 될 수도 있고 또는 굉장히 많은 무한한 수의 집합이라 하더라도 원소의 개수가 다 동일하다면 원소가 다 동일하다면 그런 모든 집합들은 다 동일한 집합이라고 할 수가 있고 합집합도 마찬가지입니다.
두 집합만의 합집합이 아니고 세 개의 집합 네 개의 집합 그 이상의 여러 집합들에 대해서도 합집합은 동일한 개념으로써 구할 수가 있는 것입니다.
기호는 유니온이라고 하는 머리글자로써 U자를 따서 붙여주고 있죠.

예를 들면 A가 1, 2, 3 B가 2, 3, 4면 A와 B의 공통 원소는 2와 3이죠.
얘를 한 번만 쓰고 그다음에 A만 가지고 있는 것이 1, B만 가지고 있는 것이 4.
두 집합이 고유하게 가지고 있는 원소들을 또 합쳐서 결국은 1, 2, 3, 4라고 하는 원소를 가진 집합을 만들게 되는데 그 집합을 A와 B의 유니온, 또는 합집합이라고 이야기를 하는 것입니다.
그림에서는 노랗게 표시한 부분이 합집합에 해당하는 부분입니다.

또 예를 들어서 조금 특수한 예인데 A와 B가 동일할 때는 어떻게 될까요?
이때에는 두 집합의 합집합은 역시 동일한 1, 2, 3 세 개의 원소를 가진 동일한 집합이 된다는 것을 보여주고 있는 것입니다.
파이썬의 정의는 합집합의 개념이 수학적인 정의와 파이썬의 정의는 같다고 할 수 있습니다.
교집합에 대해서 보겠습니다.

수학적인 집합은 두 집합 A와 B가 공통적으로 가진 원소로 구성된 집합입니다.
셋 이상의 집합도 교집합, 집합의 교집합도 이제 동일하게 정의를 할 수 있는데 우선 두 집합만 보겠습니다.
기호는 A 캡 B라고 볼 수 있습니다.
유니온을 뒤집어놓은 것이죠.
U자를.
그래서 모자의 머리 부분에 해당되는 것 같다 해서 캡이라고 표현을 합니다.

예를 들면 A는 1, 2, 3 B는 2, 3, 4라고 하는 원소를 가진 집합들이라면 A와 B의 교집합은 공통적으로 갖고 있는 원소가 2와 3이죠.
2와 3만을 가지고 구성된 집합이 바로 이 두 집합의 교집합이 되는 것입니다.
그림에서 보시면 두 집합이 겹쳐져 있어서 노랗게 표시되어 있는 부분, 그 속에는 2와 3이 들어가 있죠.
이것이 A와 B의 교집합이 되는 것입니다.
파이썬의 정의도 앞에서부터 지금까지 누누이 말씀드리지만 수학적인 정의와 동일합니다.

상대적 여집합, 조금 우리가 흔히 접하지 않았던 개념들을 이제부터 보도록 하겠습니다.
상대적 여집합에 대해서 보겠습니다.
relative complement인데, 수학적인 정의는 두 집합 A와 B에서 A의 B에 대한 여집합은 A의 원소에서 B의 공통 원소를 뺀 나머지 원소로 구성된 집합이다.
이렇게 설명한 글을 여러분이 한 2~3번은 읽어보시는 것이 좋습니다.

정확하게 표현은 했지만 한 번 읽어서는 이게 무슨 뜻인지 잘 이해가 되지 않은 경우가 많기 때문에 여러 번 읽어주시면 좋겠습니다.
셋 이상의 집합도 상대적 여집합을 동일하게 정의할 수 있습니다.
상대적 여집합을 차집합, difference set라고도 부르기도 합니다.
기호로써는 여기 지금 원 기호로 나와 있기는 하지만 원래는 백슬래시입니다.
수학에서는 A\B 또는 A - B로써 표현을 합니다.

예를 볼까요?
A는 1, 2, 3 B는 2, 3, 4라는 원소들로 이루어진 집합들입니다.
이들에서 A가 B에 대한 상대적인 여집합이 되려면 뭐가 되어야 할까?
A\B라고 표현을 했는데 바로 1이라는 값이 나왔습니다.
그 뜻은 무엇이냐 앞에서 정의했던 대로 A와 B의 공통원소들을 A에서 빼주는 겁니다.
그렇다면 그림에서 보시면 A라는 동그란 원에서 2와 3이 공통이기 때문에 2와 3을 걷어낸 것이죠.

그래서 뜯어먹다 만 피자 조각처럼 또는 어떤 사과처럼 원형이 아니고 초승달 형태의 1이 남아 있습니다.
바로 이 부분이 A가 B에 대한 상대적 여집합이라 하는 것입니다.
그 반대 경우도 생각할 수 있습니다.
A에 대해서 B의 여집합은 어떻게 할 것인가.
그때에는 A와 B의 공통원소들을 B에서 빼주면 되는 것입니다.
그 나머지 4가 B가 가진 A에 대한 상대적 여집합이 되는 것입니다.
파이썬의 정의도 동일합니다.

그다음에 절대적 여집합, 이것은 수학적인 개념에서 존재하는 것이고 우리가 일반적인 프로그래밍 언어에서는 기본적으로 정의는 하지는 않고 있습니다만 모듈 형태로써 구현은 할 수 있습니다.
그러나 우리 단계에서는 절대적 여집합을 파이썬에서 다룬다고 일단은 생각하지는 않겠습니다.

수학적인 정의로써는 전체 집합, 유니버설 세트에서 집합 S의 원소를 뺀 나머지 원소로 구성된 집합이라고 할 수 있습니다.
기호로써는 어떤 집합 S가 있다면 그 S의 여집합은 S'로 표현을 합니다.
그것은 바로 U라는 집합에서 S를 뺀 것이다.
S 전체를 그냥 통째로 빼는 것이라고 볼 수가 있습니다.
왜냐하면 S는 아무리 제아무리 커도 U라고 하는 유니버설 집합의 부분집합이기 때문에 그렇습니다.

그러니까 A가 그대로 빠져나간 나머지 자리가 S의 여집합이 되는 것입니다.
그림으로 표현을 해보겠습니다.
자꾸 이제 제가 S라고도 했다가 A라고도 했다가 B라고도 해서 조금 헷갈릴 수도 있는데 S라고 하는 경우에는 개념적으로 세트라는 집합의 머리글자를 생각을 해 주시면 되겠습니다.

일반적으로 집합을 부르고 그 집합에 대한 이름을 영어, 문자 하나로써 기호로 삼아서 부를 때에는 그냥 S라고 부르는 것이고 예를 들어서 구체적인 집합을 지목을 해서 부를 때에는 A든 B든 C든 이런 형태로써 이름을 붙인다 하는 것을 조금 이해를 해 주시면서 들으시면 조금 더 이해가 되실 것입니다.

자연수 전체 집합에 대한 A라는 집합의 여집합은 아래와 같이 표현이 됩니다.
자연수 전체의 집합은 N입니다.
N에 대한 전체에서 A가 빠져나갔다면 제아무리 A가 커도 그 자연수 집합에 1, 2, 3이라고 하는 것은 자연수의 부분집합에 불과합니다.
그 부분집합을 그대로 동그랗게 구멍이 뻥 뚫리도록 빠져나간 것이죠.

그 나머지 노란 주위에 있는 노란 부분이 A의 여집합이 된다는 것입니다.
파이썬은 전체 집합, 절대 여집합을 객체 유형으로 구현 가능은 합니다.
그렇지만 기본적인 집합 개념에 포함시키지는 않고 빌트인 객체라든지 또는 빌트인 펑션으로써 제공하지는 않습니다.
필요하면 여러분과 함께 또 어떻게 구현을 하는지 나중에 알아보도록 하겠습니다.

대칭 차집합에 대해서 보겠습니다.
symmetric difference라고 이야기를 하는데 앞에서 우리가 다루었던 difference set 하고 비슷하기는 하지만 조금 확장된 개념입니다.
수학적인 정의를 먼저 보시면 두 집합 A와 B의 대칭 차, 즉 대칭 차집합은 둘 중 한 집합에는 속하지만 둘 모두에는 속하지 않은 원소들의 집합이라고 할 수 있습니다.
이 이야기는 곧 두 집합의 합집합에서 공통집합을 빼낸 것이라고 보시면 되겠습니다.

기호로써는 델타 대문자 델타로써 표현합니다.
삼각형, 이등변 삼각형을 그대로 델타라고 표현을 할 수 있는 것이죠.
예를 보겠습니다.
A는 1, 2, 3 B는 2, 3, 4라면 A와 B의 대칭 차집합은 바로 밑에 있는 그림을 먼저 보시는 것이 훨씬 더 편합니다.
먼저 1, 2, 3, 4가 모두 들어 있다면 이것은 두 집합의 합집합이 되겠죠.

그런데 2, 3 그것은 두 집합의 교집합입니다.
그 합집합에서 교집합을 뺀 나머지 부분이니까 가운데는 하얗게 뻥 뚫려 있고 양쪽으로 날개처럼 노란 부분이 남아 있는 집합의 형태가 대칭적 차집합이라고 하는 것입니다.
앞에서 보셨을 때는 한쪽만 노란 부분이었죠?
그런데 여기에서는 양쪽이 대칭적으로 노란 부분이 나오고 차집합으로 구성이 되니까 대칭적으로 또 이야기를 할 수가 있는 것입니다.

파이썬의 정의는 역시 수학적인 정의와 동일하고 이런 집합, 차집합들을 잘 구현해 주고 있습니다.
이와 같이 이번 시간 본격적으로 실습에 들어가기 전에 수학에서 이야기하는 집합의 개념을 우리가 먼저 살펴보았고 이런 개념들을 잘 이해를 하시면서 코딩을 하시면 훨씬 더 이 코딩이 쉽게 이해가 되실 것입니다.
