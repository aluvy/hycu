-------------------------------------------------------------
12_03. 프로그램은 죽지 않는다 다만 말할 뿐이다.
-------------------------------------------------------------

[3페이지]

이번 교시에는 지난 교시에 이어서 지난 교시에 다루었던 개념을 실습을 통해 확인해 보겠습니다.
이번 교시의 제목은 프로그램은 죽지 않는다.
다만 말할 뿐이다.
누가 이야기한 것과 비슷한 이야기죠?
과연 이렇게 할 수 있는 프로그램은 어떻게 코딩이 될까 실습을 통해서 보겠습니다.
실습을 위해서 프로그램 동작 환경을 조금 구성해 보겠습니다.
디렉터리 이름을 PP-12-익셉션 핸들링 정도로 정의했고요.

응용 프로그램 파일 이름을 공통적으로 익셉션 이그잼플이라고 붙이고 여기의 진도에 따라서 1, 2, 3 등으로 일련번호를 붙였습니다.
그리고 이들은 전부 파이썬 프로그램 파일들입니다.
모듈 파일이라고도 이야기할 수 있겠고요.
확장자는 .py 파일입니다.
여기에 당분간은 추가로 도입을 해야 하는 모듈의 이름은 없습니다.
그래서 모듈은 당분간 쓰지는 않겠고요.
데이터 파일을 피플.csv로 정했습니다.

사람에 대한 정보를 가진 콤마 세퍼레이티드 밸류 파일인데요.
여기에 데이터 파일 저장 디렉터리는 역시 파이썬 프로그램과 동일한 디렉터리에 저장하도록 했습니다.
VSC에서 코드를 작성하고 실습을 할 것입니다.
VSC는 지난 2차시 또는 3차시에 우리가 잠깐 다루고는 그 이후부터 지금까지 주로 주피터 노트북을 사용했죠.
오래간만에 비주얼 스튜디오 코드를 사용해 보도록 하겠습니다.

지금 보시는 바와 같은 코드를 직접 작성해서 입력하겠습니다.
입력하기 위해서는 먼저 파이썬 프로그램을 아나콘다를 통해서 비주얼 스튜디오 코드를 띄우도록 하겠습니다.
처음 동작을 시켰기 때문에 워크스페이스는 없는 상태이고 그래서 우선 익스플로러 팬을 연 다음에 파일 메뉴에서 세이브 워크스페이스 애즈.
뭘 세이브 하는지는 지정은 안 돼 있습니다.
그렇지만 비어 있는 거라도 아무거나 세이브 애즈 워크스페이스로 저장을 하겠습니다.

디렉터리를 잘 찾아 봐야겠죠?
디렉터리는 사용자 여러분의 홈 디렉터리 안에 마련을 해야 되겠죠.
여기에서 이 컴퓨터의 사용자는 hycu이기 때문에 hycu 디렉터리에서 파이썬 프로그래밍이라는 디렉터리를 지난번에 만들어놓은 게 있죠.
여기에 지금까지 우리가 12차시까지 오면서 만들어놓은 디렉터리들이 있습니다.

이 중에 12차시의 익셉션 핸들링으로 들어가겠습니다.
여기에서 익셉션 핸들링 속에서 또 새로 만드는데 폴더를 하나 또 새로 만들겠습니다.
이름을 PP-12-WS라고만 쳐보겠습니다.
이건 디렉터리입니다.
디렉터리 속에서.
PP-12-익셉션 핸들링이라는 이름으로 워크스페이스 파일을 생성해서 세이브를 하겠습니다.
그다음에 워크스페이스 파일이 들어 있는 디렉터리 폴더를 여기에 등록을 시켜줘야 합니다.

애드 폴더를 눌러서 조금 전에 PP-12-워크스페이스 WS라고 했죠.
애드를 하겠습니다.
애드가 됐습니다.
여기에는 현재 워크스페이스에 해당하는 파일만 들어 있고 아무런 파일이 없는 상태죠.
이 상태에서 뉴 파일을 여는 겁니다.
어떤 파일을 열겠는가.
처음, 코딩을 하는 단계를 위해서 처음 익셉션 이그잼플이라고 하는 파일을 열겠습니다.
.py 파일을 열겠습니다.
바로 에디팅 모드로 들어갔습니다.

현재 아무것도 코딩이 되어 있지 않은 상태죠.
여기에 코딩을 하도록 하겠습니다.
조금 전에 여러분에게 말씀을 드렸던 피플.csv를 여는 코드를 코딩해 보겠습니다.
프로그램을 코딩해 보겠습니다.
코딩이 끝났습니다.
단순하게 세 줄짜리 코드입니다.

위에 있는 코멘트는 코딩 줄로 취급하지는 않고 세 줄짜리 프로그램이 돼 있는 상태죠.
처음에 피플.csv라는 이름으로써 파일을 오픈해서 그 파일 객체의 참조를 더 파일이라는 객체 참조에 배정을 했습니다.
그리고 더 파일.
속성 네임을 프린트 하도록 했습니다.
이게 열렸다, 이즈 오픈드.
프로그램 끝났다, 프로그램은 다 실행됐다 해서 프로그램 던이라는 메시지까지 찍어보도록 했습니다.

실행을 시키겠습니다.
실행시키는 방법은 이 파일 익셉션 이그잼플1.py를 오른 클릭을 해서 밑에 쪽 메뉴를 보시면 런 파이썬 파일 인 터미널이라는 항목이 있습니다.
이걸 그대로 클릭을 해주시면 됩니다.
클릭을 하겠습니다.
아나콘다에서 기본적으로 제공하는 터미널의 셸은 파워셸입니다.
파워셸이 여기에.
파워셸이죠.
파워셸이 들어가고 이 파워셸을 통해서 파이썬이 동작을 하면서 이 파이썬 프로그램 파일을 실행시켰습니다.

파이썬이 어디에 있을까요?
바로 여기 C 노랗게 표시된 부분.
아나콘다3 파이썬.exe 이것이 파이썬 프로그램입니다.
그리고 이 파이썬이 실행을 시키는 파일은 조금 전에 코딩을 해서 입력한 파일 이름인 익셉션 이그잼플1.py 얘를 실행시킨 거죠.
이 패스 이름이 아주 길죠.
이런 형태로 프로그램을 동작시키는 것을 도와주는 것이 바로 아나콘다가 해주는 것이고
이를 아나콘다 밖에서 한다면 일일이 이런 패스 이름이라든지 모든 환경을 우리가 지정해 줘야 하는데 아나콘다가 그런 환경 구성 작업을 실현해서 우리에게 제공해 준 것입니다.
이제 프로그램 기능을 보겠습니다.
오픈을 했는데 파일 낫 파운드 에러가 났습니다.
노 서치 파일 오어 디렉터리 해서 피플.csv가 없다.
왜 없죠?
당연히 파일을 만들지 않고 바로 이 프로그램부터 돌렸기 때문에 파일을 열 수 없는 것이 당연합니다.

그래서 이 데이터 파일을 만들어야 되겠죠.
데이터 파일을 만드는 과정을 또 보겠습니다.
데이터 파일 이름이 피플.csv이고 내용을 보면 첫 줄이 유저 네임, 퍼스트 네임, 라스트 네임, 롤, 데이트 조인드라는 이름으로 헤드라인이 주어졌고, 그 밑에는 5명 정도의 사람 이름과 이들이 들어온 날짜들이 들어 있습니다.
이런 내용들은 전부 텍스트 파일들이죠.
그리고 각각의 단어들이 다 쉼표로 구분이 되어 있습니다.
이 파일을 코딩을 해서.

코딩이라기보다는 작성을 해보겠습니다.
여기에서 다시 뉴 파일을 넣고 여기에는 피플.csv라는 이름으로 넣겠고요.
여기에 내용을 넣겠습니다.
데이터 입력이 끝났습니다.
첫 번째 라인은 타이틀 라인이죠.
타이틀 헤더 라인이고 두 번째부터 여섯 번째 라인까지가 각 사람에 대한 정보가 입력돼 있는 텍스트 파일입니다.
이 텍스트 파일을 저장을 했습니다.
저장을 하고 다시 이 소스코드로 다시 들어오겠습니다.
들어와서 또 실행을 시켜보겠습니다.

실행을 시켜볼까요?
런 파이썬 파일 인 터미널.
실행을 시켜보겠습니다.
바로 밑에 실행이 됐죠.
피플.csv 이즈 오픈드.
그다음에 프로그램 던.
csv하고 이즈가 붙었네요.
이걸 한 칸을 더 띄워서 실행을 시켜보겠습니다.
이제는 글자도 좀 깨끗하게 나왔죠.
피플.csv가 오픈됐다.
프로그램 이즈 던.
지금까지 여러분이 보신 것은 코딩을 했습니다.
그러나 데이터 파일을 준비하지 않았고 오픈을 시켰기 때문에 예외가 발생해서 바로 프로그램이 멈췄습니다.

죽었다고 표현할 수 있는 거죠.
그러면 데이터 파일이 없다고 프로그램이 죽어?
죽음이냐?
이렇게 우리는 생각을 할 수가 있습니다.
안 그럴 수가 있는데, 죽지 않을 수도 있는데.
그리고 끝까지 동작을 해서 프로그램 던이라는 맨 마지막 줄에 있는 프린트문까지 다 실행을 할 수 있는데 왜 중간에 죽어버렸냐 하면 불평을 할 수가 있는 거죠.

우리는 그렇게 할 수가 있는 겁니다.
그러면 죽지 않도록 하려면 어떻게 해야 하죠?
이 파일 낫 파운드라고 하는 예외를 캐치해서 예외에 대한 적절한 조치를 취해 주면 이 프로그램은 중간에 중단되지 않고 중지되지 않고 끝까지 살아서 움직일 수 있게 될 수 있는 것입니다.

그 과정을 한번 코딩을 통해서 또 확인을 해보겠습니다.
다음번에는 어떤 내용을 다룰까요?
조금 전에 파일이 없거나 또는 이름이 달랐기 때문에 데이터 파일을 발견하지 못했다.
그때 바로 죽지 않도록 예외를 정상적으로 처리하도록 해보자 하는 첫 번째 코딩 단계에 들어가는 것입니다.
그래서 앞에서 보셨죠.
예외 메시지.
다시 한번 재현을 해볼까요?
앞부분을 여러분이 한번 보시면 될 것 같습니다.
파일 낫 파운드 에러.
익셉션이 발생했죠?

그런 파일이나 디렉터리는 없다는 오류 익셉션 메시지를 표시하고서는 바로 프로그램이 멈췄던 것을 볼 수 있는데요.
이런 경우에는 우리는 어떤 구문을 사용할 수 있죠?
바로 트라이 익셉트 구문을 사용해서 예외를 처리할 수 있도록 하는 것입니다.
그 구조에 맞춘 코딩을 해보겠습니다.
이제 파일을 또 하나 생성하겠습니다.
여기에서 뉴 파일, 그다음에 익셉션 이그잼플2.py를 넣고 코딩을 하도록 하겠습니다.
코딩이 완성이 됐습니다.

이제 트라이문을 넣었습니다.
앞에 오픈 파일 댓 이스 인 디스 세임 폴더.
이것은 앞에 이그잼플1에서 동일한 코멘트였고요.
트라이하고 밑에 있는 익셉트가 새로 넣은 줄입니다.
트라이하고 익셉트가 들어갔기 때문에 한번 인덴트가 돼서 오픈 그리고 프린트문이 원래 코드와 마찬가지로 들어 있습니다.
그다음에 익셉트 블록에서는 익셉트문은 익셉션이라는 베이스 클래스를 그대로 사용했습니다.

지난 시간에는 익셉션은 포괄적인 예외 처리를 위해서 쓸 수 있다고 말씀을 드렸죠?
어떤 예외가 발생하든지 다 여기에 매치가 돼서 들어오게 돼 있고 여기에서는 우리가 예상하기를 파일이 없어서 이런 예외 블록으로 들어왔기 때문에 파일 네임드 피플.csv가 낫 파운드다.
없다는 이유임이 분명할 거다 해서 지금 프린트문은 이렇게 집어넣은 것입니다.
그리고 프로그램 던입니다.
이런 상태에서 정상적으로 동작을 하는지 보겠습니다.

지금 피플.csv가 같은 디렉터리에 있습니다.
당연히 열리고 프로그램은 정상적으로 종료를 해야 하죠.
익셉션 이그잼플2.py를 실행시켜 보겠습니다.
런 파이썬 파일 인 터미널.
여기에 피플.csv는 오픈드 프로그램 던까지 나왔습니다.
이제 이 중에서 이 피플.csv라는 데이터 파일을 리네임을 시켜보겠습니다.
어떻게?
우리가 흔히 하는 실수 중의 하나가 철자를 뒤바꿔 쓰는 경우가 꽤 있죠.
csv가 아니고 cvs라고 바꿔보겠습니다.
cvs로 바꿨습니다.

그럼 이 이그잼플2 프로그램은 제대로 동작을 할 수 있을까요?
보겠습니다.
물론 없겠죠.
이 오픈 단계에서 오류가 발생할 것입니다.
csv 파일을 찾았는데 cvs로 원래는 있게 됐기 때문에 찾지 못하는 에러 또는 익셉션이 발생할 겁니다.
그럼 어디로 가는지 보겠습니다.
런 파이썬 파일.
이렇게 동작을 시켰더니 파일 네임 피플.csv 낫 파운드.
이건 어디에서 나온 메시지일까요?
바로 이 프린트문에서 나온 메시지가 됩니다.

여기에 익셉트 익셉션의 익셉트 블록인 프린트문에서 나온 메시지가 되고 그럼에도 불구하고 이 프로그램은 죽지 않고 끝까지 갔습니다.
어디까지?
마지막에 있는 프로그램 던이라는 이 구문까지 실행을 하고 완전하게 종료가 된 것이죠.
이렇게 중간에서 오류가 났다 하더라도 이 프로그램은 죽지 않고 끝까지 살아서 동작을 했다.

어떤 서비스까지 하고?
찾고자 하는 파일이 없다는 말까지 하고 종료가 됐다는 것입니다.
이 프로그램은 죽지 않았다.
말을 했을 뿐이다.
라는 명제가 성립된 것이죠.
이제 우리는 이 익셉트 익셉션을 사용하면서 무슨 예외가 발생하든지 좋다.
다 여기로 들어와라.
그리고 여기에서는 우리가 추측을 한 것뿐이죠.

어떤 예외가 발생해서 들어온지는 분명하게 알 수는 없었으나 그러나 이 프로그램 코드를 보았을 때 트라이 부분에서 오픈을 하다가 예외가 발생한 거로 추측이 되기 때문에 이 익셉트 블록에서는 분명히 파일이 없어서 이리로 왔을 것이다.

그러니까 이런 메시지를 주면 적당하겠다는 추측성으로 이런 메시지를 주었을 뿐입니다.
그러나 실제로는 그렇지 않을 경우도 꽤 있죠.
왜 들어왔는지 정확하게 모르는 경우가 오히려 더 정상적이라고 할 수가 있습니다.
그럴 경우에는 대문자 익셉션이라는 포괄적인 예외를 매치를 시켜서 대책을 세우기보다는 좀 더 구체적인 예외를 세분화해서 대책을 세우는 것이 더 좋겠다는 것입니다.

그래서 이제는 단순하게 트라이 익셉트 익셉션이 아니고 트라이 익셉트 스페시픽 익셉션, 또 스페시픽 익셉션, 그다음에 최종적으로 익셉트 익셉션의 구문 구조로 가는 것이 더 올바른 방법이라는 것이고 이런 코딩 스타일을 연습해 보겠습니다.
이제 세 번째 파일을 만들어볼 차례네요.
새로운 파일을 또 열고 익셉션 이그잼플3.py 파일을 만들어보겠습니다.
코딩을 또 시작해 보겠습니다.
코딩이 됐습니다.
코드가 조금씩 조금씩 길어지고 있습니다.

이 앞에 있는 부분은 지금까지 코딩을 해왔던 부분과 같습니다.
여기에 더파일.푸를 호출.
어떤 메서드인데 이 푸라는 이름을 가진 메서드를 호출하는 것을 끼워넣고 여기에 스페시픽 익셉션 클래스를 두었습니다.
파일 낫 파운드 에러, 어트리뷰트 에러, 이 두 개를 특정 예외로서 지정하고 둘 외에는 없다고 우선 단정을 지었습니다.
이럴 때 어떤 결과가 나올지 보겠습니다.
현재 이 데이터 파일은 그대로 cvs로 이름이 잘못 지정된 그대로 둔 상태입니다.

그럼 이 코드를 실행을 시켜보겠습니다.
자세히 보시면 오픈에서 열고자 하는 파일의 이름은 cvs가 아니고 csv입니다.
실제 없는 파일을 지금 열고자 하는 것이죠.
동작을 시켜보겠습니다.
우선 이그잼플3번을 선택하고 오른 클릭을 해서 런 파이썬 인 터미널.
어떤 오류가 발생했을까요?
파일 네임드 피플.csv 낫 파운드가 됐습니다.
이것은 바로 여기에 파일 네임드 피플.csv 낫 파운드 이 부분이 실행됐기 때문에 그렇죠.
왜 실행이 됐을까요?

파일 낫 파운드 에러라고 하는 익셉션이 발생해서 이 익셉트 구문에 매치가 된 것입니다.
매치가 돼서 그에 해당하는 익셉트 블록이 실행이 된 거죠.
이제 이 파일 이름을 정상적으로 복원시켜 보겠습니다.
리네임을 통해서.
여기 있네요.
리네임을 통해서 cvs를 csv로 다시 원상복귀 시켜보겠습니다.
그리고 다시 파일을 실행을 시켜보겠는데 조금 예측을 하고 실행을 하겠습니다.
더파일.푸.
푸라고 하는 것은 뭘까요?

마치 우리가 흔히 아무개 하듯이 푸라고 하는 것도 특정한 이름이 아닙니다.
그냥 아무거나 주워섬길 때 대충 이름을 붙여줄 때 푸라는 이름을 이쪽 동네에서는 많이 사용하는 습관이 있다는 거죠.
그럼 이런 푸라고 하는 메서드 어트리뷰트가 오픈이 열어준 클래스 또는 객체에 들어 있을까요?
들어 있지 않죠.
전혀 엉뚱한 이름을 붙여준 건데 이런 어트리뷰트, 없는 어트리뷰트에 대한 호출을 하겠다고 했을 때는 어떤 오류가 발생하는지 보도록 하겠습니다.

우선은 이 오픈은 통과되겠죠.
이거는 파일 이름을 정상화시켰기 때문에 통과는 될 것입니다.
실행을 시켜보겠습니다.
.피플.csv는 오픈이 됐습니다.
그리고 레퍼런스 더 파일은 어트리뷰트 푸를 갖고 있지 않다.
더 레퍼런스 더 파일 해즈 낫 어트리뷰트 푸.
바로 여기 이 어트리뷰트 에러가 발생했고 거기에 대한 익셉트 블록이 실행이 된 것입니다.
그러고 나서 이 프로그램은 죽지는 않았고 프로그램 던까지 끝까지 가서 정상적으로 종료가 된 것입니다.
이와 같이 이런 형태가 됐고.
그다음에 여기에 푸라고 하는 것이 아니고 뭔가 네임은 있었어요.

네임은 지금 우리가 사용을 했죠.
이게 스트링이죠.
스트링을 호출을 했다.
마치 메서드인 것처럼.
데이터 어트리뷰트를 메서드 어트리뷰트인 것처럼 호출을 했다.
이럴 때는 어떤 익셉션이 발생할까요?
그리고 이런 익셉션을 두 가지 중에 한 가지로서 매치가 돼서 처리가 될까요?
확인을 해보겠습니다.
세이브를 하고 다시 이 파일을 실행시켜 보겠습니다.
뭔가 다른 오류가 났습니다.
타입 에러가 났네요.

타입 에러 익셉션이 났고 스트링 오브젝트는 호출할 수 없는 거야라고 하는 시스템 메시지를 준 다음에, 자세히 아무리 찾아봐도 여기에 프로그램 던이라고 하는 메시지를 찾아볼 수 없습니다.
이 프로그램은 프로그램 던을 프린트 하기 전에 죽어버린 것이죠.
그러면 여기에서 타입 에러인지 뭔지 무슨 에러가 날지는 모르겠는데 그거까지 다 처리를 하려면 어떻게 해야 한다고 했죠?

바로 이 밑에 익셉트 스페시픽 익셉션 처리하는 매치시키는 구문들 밑에 뭐가 있어야 한다?
포괄적인 베이스 클래스로서 처리를 하는 구문이 하나 있어야 한다는 것이죠.
그러고 나서 프린트 섬띵 웬트 롱.
뭔지 모르겠지만 뭔가 잘못됐다고 하고.
그런데 익셉션이라고 했으면 그 익셉션 하부에 있는 파생 클래스 수십 가지 또는 100개에 가까운 파생 클래스 중에 뭐가 여기에 걸려든 건지 알 수가 없거든요?

그러니까 일단은 섬띵 웬트 롱이다라고 표현을 해놓은 것이죠.
이런 상태에서 다시 한번 실행을 시켜보겠습니다.
뭔가, 뭔지는 모르겠지만 예외가 발생했고 그것 때문에 죽지는 않았고 여기 프린트 프로그램 던까지는 나는 일단 가서 일은 끝냈다고 프로그램이 이야기를 한 것입니다.
앞의 경우하고 지금 경우하고 비교를 해보면 어떨까요?
앞에는 차라리 프로그램이 중간에 죽기는 했지만 타입 에러가 났구나 하고 분명하게 알 수는 있었습니다.

그런데 뒤의 경우에는 뭔가 두루뭉술하게 프로그래머는 무슨 에러가 났는지 예측을 할 수가 없기 때문에 뭔가 하여튼 잘못된 거야라고만 이야기를 할 수밖에 없었던 것이죠.
그 메시지가 그대로 표현됐는데 어떤 쪽의 정보가 더 분명하죠?
바로 앞쪽에서 정보가 더 분명했던 거죠.
이런 경우에는 그나마 예측은 할 수 없다 하더라도 실제 무슨 익셉션이 발생했는지 시스템이 주는 정보를 그대로 표현하는 것도 좋은 방법이 될 수 있을 것입니다.

이럴 때는 어떤 구절을 쓴다고 했죠?
프레이즈죠.
애즈 프레이즈를 쓴다고 말씀을 드렸습니다.
이 애즈 프레이즈를 적용해 보겠습니다.
익셉션 옆에다 애즈.
그다음에 아이덴티파이어.
ex라고만 표현을 해보죠.
익셉션의 머릿글자 두 개만 표현해서 섬띵 웬트 롱 잇 워즈 하고 여기에 ex라고 표현을 하면 어떨까.

뭔가 잘못되기는 했는데 그것을 시스템이 준 메시지에 근거를 해서 표현을 해보면 바로 이거다.
라고 이야기를 해주는 겁니다.
그럼 조금 더 정확한 정보 또는 명확한 정보를 주면서 처리를 할 수 있게 된 거죠.
다시 한번 실행을 시켜보겠습니다.
세이브를 하고 그다음에.
세이브 한다는 것은 컨트롤 S를 눌렀을 뿐입니다.

이 파일을 런 파이썬 파일 인 터미널에서 다시 동작을 시켜보겠습니다.
메시지를 보겠습니다.
피플.csv는 오픈 됐다.
뭔가 잘못됐는데 그것은 스트링 오프젝트를 호출하려고 했기 때문이다.
라는 것으로써 알 수가 있는 것이죠.
str 오브젝트 이즈 낫 콜러블.
이것은 프로그래머가 넣어준 정보가 아니고 파이썬 인터프리터가 준 정보를 그대로 옮겨줬을 뿐입니다.

무엇을 통해서?
이 ex라고 하는 아이덴티파이어를 통해서 받아서 여러분에게 표시를 해준 것이죠.
이렇게 함으로써 이제 이 프로그램은 몇 가지 앞에서는 명확한 이유를 알고 있는 또는 예측을 할 수 있는 또는 중요하게 여겨서 처리를 해야 하는 몇 가지 익셉션을 처리를 하게 한 다음에, 
그 나머지는 몰라도 된다든지 또는 그다지 중요하지 않은 경우에는 전부 익셉션이라고 하는 클래스로써 매치를 시킨 다음에 좀 더 필요하다면 시스템이 준 메시지로 그 정보를 보강하는 정도로 해서 효율적인, 그러면서도 죽지 않는 프로그램을 구성할 수 있었던 것입니다.
이제는 모든 서비스를 위한 동작 조건이 완전하게 구비가 된다면, 준비가 된 다음에 프로그램이 실행될 수 있도록 하는 구조를 보겠습니다.

이런 경우에는 예외가 발생해도 죽지 않는 것뿐만 아니고 예외가 발생할지 안 할지 미리 검토를 한 다음에 이 프로그램이 정상적으로 서비스를 할 수 있을지 없을지 판단하고 그럴 때만 서비스를 위한 모든 동작을 하도록 함으로써 이 프로그램이 서비스를 위해서 필요로 하는 자원들을 낭비하지 않도록 하는 그런 구조의 프로그램을 만들 수 있게 되는 것입니다.
이때 주로 사용하는 구문 구조는 바로 트라이 익셉트 엘스의 구문 구조가 되는 것입니다.

예를 들어서 안전한 파일 읽기가 있습니다.
데이터 파일이 열렸을 때만 파일 내용을 읽어서 표시를 하겠다는 것입니다.
프로그램 소스코드를 보도록 하겠습니다.
이제 새로운 소스코드를 작성할 차례가 됐죠.
여기에서 새로운 파일을 만들어 보겠습니다.
지금 넘버가 3까지 왔으니까 4.py로 열고요.
코딩을 시작하겠습니다.
코딩이 됐습니다.
앞에서 사용했던 코드를 거의 그대로 사용을 했습니다.

다만 여기에 추가가 된 것이 엘스 파트가 되겠고, 그다음에 여기 이 엘스 파트에서 새롭게 추가가 된 기능, 즉 서비스를 위한 기능은 위에서 오픈한 피플.csv의 내용을 한 줄 한 줄 읽어서 화면에 표시를 하는 구문을 집어넣은 것이죠.
포 구문을 집어넣었습니다.
더 파일이라는 참조는 바로 파일 객체입니다.
이 파일은 앞에서 보셨듯이 7줄인가요?
6줄의 텍스트 파일이 내용입니다.

여기에서 포문을 수행시키면 이 파일 객체는 한 줄 한 줄이 한 아이템인 리스트, 즉 텍스트 라인이 아이템이 되는 리스트인 것처럼 이터러블하게 움직이는 객체가 됩니다.
그 객체로부터 한 줄씩 한 항목씩 뽑아내어서 그것을 프린트 하는 것입니다.
잘 실행은 됐네요.
어떻게 실행이 됐는가 보죠.

유저 네임, 파일 네임, 라스트 네임, 롤, 데이트 조인드라고 하는 헤더 라인이 표시가 됐고 한 칸 띄어서 첫 번째 사람, 또 한 칸 띄어서 두 번째 사람 앤, 그다음에 윌, 루피, 이나라는 사람 이름들이 쭉 나왔습니다.
좀 보기가 싫죠?
한 칸 한 칸씩 빈 줄이 섞여 있어서 별로 보기가 좋지 좋죠.
이렇게 빈 줄이 섞이는 이유는 뉴 라인이나 캐리지 리턴 하나로 있어야 하는데 두 개가 한꺼번에 붙어 있기 때문에 새로 빈 줄에 끼어들게 된 것이죠.

이걸 막기 위한 것이 알스트립이라는 메서드로서 끝에 달려 있는 화이트 스페이스를 다 트림, 잘라 없애버리고 순수한 텍스트들만, 비저블 텍스트들만 프린트를 한 것입니다.
다시 실행을 시켜보겠습니다.
이렇게 해서 좀 촘촘하게 콤팩트하게 라인들이 디스플레이 됐음을 볼 수 있습니다.

지금 이 알스트립이라고 하는 것은 바로 원_라인이라는 참조가 가리키는 객체 유형이 스트링, str 유형이기 때문에 그 str 유형이 가지고 있는 메서드를 그대로 활용한 것입니다.
이렇게 여러분이 보신 것은 이 엘스문이 새롭게 등장했고 그 안에 있는 엘스 블록이 수행됐다.
언제?
바로 위에서 모든 서비스를 할 준비가 완비가 됐다는 것이 보장이 됐을 때 엘스 블록이 수행됐다는 것을 생각해 주시면 되는 것입니다.

이렇게 함으로써 준비가 안 된 상태에서 돌다가 실패하고 그 중간의 자원을 사용함으로써 낭비를 하게 되는 그런 문제는 없어지게 된다는 것이죠.
이제는 마지막으로 예외가 발생하든 안 하든 항상 트라이 구문을 실행했을 때 곁들여서 마지막으로 에필로그라고 하죠.
에필로그 형태의 블록이 실행되도록 하는 구문을 보겠습니다.

이제 이 코드를 프로그램을 코딩하기 위해서 새로운 파일을 또 하나 만들어 보겠습니다.
이제는 마지막으로 익셉션 이그잼플5.py 파일이 되겠습니다.
이제 코딩을 해보겠습니다.
코딩이 돼 있는 상태입니다.
우선 프로그램 시작하자마자 프로그램 스타트라고 하는 메시지를 표시하도록 했습니다.
그다음에 트라이 구문이 오게 되는데요.
처음에 오픈을 했습니다.

피플.csv 파일을 오픈 하고 여기에서 오류가 발생한다면 이 익셉트문 중에서 수행이 되겠죠.
그리고 엘스는 수행을 하지 않을 것입니다.
그렇지만 파이널리는 오류가 있든 없든 실행을 할 것입니다.
만일 오류가 없다면 엘스 구문도 실행이 되고 뒤이어서 파이널리 구문도 실행이 되고 또 이어서 프린트.
이 프로그램의 마지막 부분인 프린트문도 실행이 될 것입니다.
지금은 파일이 어디 있죠?
데이터 파일이?
피플.csv로 잘 들어 있습니다.

그런 상황이기 때문에 오류가 전혀 일어나지 않고 전 과정이 수행이 될 것입니다.
어떤 플로우로 수행이 되는지 지켜보도록 하겠습니다.
실행을 지켜보겠습니다.
처음에 프로그램 스타트.
프로그램 스타트가 실행됐습니다.
여기에서와 같이 첫 번째 줄이 실행됐고.
두 번째, 쇼 디스 이프 노 익셉션.
즉, 엘스 부분이 실행이 된다는 뜻은 아까 뭐라고 말씀을 드렸죠?
이 앞에서 예외가 전혀 발생하지 않았기 때문에 이리로 들어올 수 있었다는 것이죠.

바로 이 부분에서 익셉션이 없었기 때문에 이 부분이 보여줄 수 있었다는 이야기를 하는 것입니다.
그렇다면 파이널리는 어떻게 될까요?
익셉션이 실행이 되든 안 되든, 즉 익셉션이 발생을 하든 안 하든 이 파이널리는 실행을 했습니다.
이 부분이죠.
파이널리 블록.
디스 이스 인 더 파이널리 블록.
이 부분이 실행됐고, 그다음에 프로그램 던 대신에 지금 디스 이스 아웃사이드 더 트라이 익셉트 엘스 파이널리.

이 바깥 부분이 마지막으로 실행이 돼서 프로그램이 완전하게 종료가 된 것입니다.
이제 이 오픈 하는 부분에서 f라고 하는 레퍼런스로 객체 레퍼런스를 받고 f.네임을 호출하는 에러를 유발시켜 보겠습니다.
예외를 유발시켜 보겠습니다.
어떤 결과가 나올까요?
우리가 예상하기에는 엘스는 수행이 되지 않을 것입니다.
그러나 파이널리는 수행이 돼야 하겠죠.
그리고 이 프로그램의 마지막 부분도 수행이 돼야 할 것입니다.
보겠습니다.

프로그램 스타츠, 그다음에 디스 이스 더 파이널리 블록.
파이널리 블록은 실행이 됐습니다.
여기는 프린트 e라고 했는데 이거는 좀 잘못 썼네요.
이것을 확장시켜 보겠습니다.
e는 도대체 무슨 메시지를 담고 있는 거냐라고 했을 때 여기에 e를 써야겠죠.
여기에 e 대신에 ex를 쓰도록 하겠습니다.
ex이고 다시 한번 코딩을 해보겠습니다.
코딩이 아니고 실행을 시켜보겠습니다.
여기에 ex라고 하는 것이 지금 신택스 에러가 났네요.

어떤 점에서 신택스 에러가 났는지 보겠습니다.
프린트.
콤마가 하나 빠졌죠.
그래서 에러가 발생했는데 파일 낫 파운드 에러는 아니었기 때문에 포괄적으로 익셉션 블록으로 들어왔다.
구체적인 이유는 시스템이 준 정보를 보니까 str 오브젝트를 호출하려고 했기 때문이다.
이런 익셉션이 발생했기 때문에 엘스는 수행되지 못했습니다.

그렇지만 파이널리는 그와 상관없이 수행이 됐습니다.
그리고 정상적으로 프로그램이 끝까지 수행되면서 트라이 구문 바깥에 있는 프린트문도 역시 실행이 된 결과를 보여주고 있습니다.
이와 같이 지금까지 프로그램에서 예외가 발생했을 때 프로그램이 죽지 않고 끝까지 예외에 대해서 대처를 하는 모든 과정들을 실습을 통해서 보았고요.

이제 남은 한 가지는 여러분 스스로가 응용에 적합한 문맥이라고 하죠.
컨텍스트, 응용의 컨텍스트에 알맞은 예외 상황을 스스로 만들어내시고 그에 대한 정보를 제공하고 대처를 할 수 있는 블록을 만들고 프로그램이 끝까지 수행될 수 있고 정상적인 서비스를 할 수 있도록 만들어주는 과정에 대해서 실습을 해보도록 하겠습니다.

이제 사용자 예외에 대해서 실습을 해보겠습니다.
예를 들 것이 불충분한 데이터 파일에 대한 예외입니다.
불충분한 데이터 파일이라는 것은 데이터 파일은 있습니다.
존재를 하기 때문에 열 수 있지만, 오픈 할 수 있지만 내용이 부족하거나 비어 있는 파일이어서 응용 프로그램이 정상적인 서비스를 제공할 수 없도록 하는 파일을 뜻합니다.

이런 상황, 즉 시스템은 알 수는 없지만 사용자나 프로그래머가 예외라고 판단할 수 있는 상황에 대해서 어떻게 예외를 발생시킬 수 있겠는가.
좀 더 구체적으로 말씀드리면 그런 상황을 표현할 수 있는 클래스를 제작하고 작성하고 생성하고 그 클래스에 맞춰서 시스템이 처리할 수 있도록 부동을 시켜줄 수 있는가라는 점을 바로 이 사용자 예외를 통해서 해결을 하는 것입니다.

데이터 파일에서 우리가 사용자 예외를 발생시킨다면 바로 레이즈 구문을 사용하면 될 것입니다.
레이즈라는 키워드 옆에 커스터마이즈드 익셉션 클래스를 주면 되는 것이죠.
그러면 예외의 시그널이 파이썬에게 일단 전달이 되고 다시 파이썬은 응용 프로그램에 신호를 전달합니다.

그러면 그 응용 프로그램이 이 예외에 대한 익셉트 구문을 가지고 있으면 매치가 돼서 정상적으로 대처가 되고, 그리고 또 이 프로그램은 수행을 할 수 있는 상태가 되는 것입니다.
즉, 죽지 않고 끝까지 갈 수 있는 상태가 되는 것이죠.
그럼 이런 내용을 가진 프로그램 코딩을 해보도록 하겠습니다.
다시 새로운 파일을 하나 작성하겠습니다.
익셉션.
6까지 나갔나요?
그리고 여기에 코딩을 시작하겠습니다.

이제 코딩된 결과를 가지고 실행을 해보겠는데요.
그전에 먼저 코드에 대해서 설명을 드리겠습니다.
처음 클래스 커스터마이즈드 익셉션이라는 예외를 현재 생성하고자 하고 있습니다.
그 클래스를 만들고자 하는 것입니다.
베이스 클래스로서는 익셉션이 들어가 있습니다.
익셉션 클래스로부터 상속을 받아서 커스터마이즈드 익셉션 클래스를 만드는 것입니다.
그 속 안에 스위트는 뭐가 있나요?
패스가 있습니다.

아무것도 없다는 거죠.
이 패스라는 것은 노 오퍼레이션에 해당되는 것이기 때문에 내용은 특별하게 지정해 놓고 있지 않습니다.
그대로 익셉션이 가지고 있는 속성을 그대로 받아서 쓰고만 있을 뿐입니다.
조금 달라진 점이 있다면 이렇게 독스트링을 하나 더 추가적으로 집어넣은 것뿐입니다.
그래서 나중에 헬프 커스터마이즈드 익셉션 하면 바로 이 스트링이 여러분에게 표시가 될 것입니다.

그다음에 또 엠프티 파일 에러라고 하는 이 구체적인 스페시픽한 익셉션 케이스를 만드는 차례인데요.
이것도 역시 커스터마이즈드 익셉션입니다.
그래서 커스터마이즈드 익셉션이라는 베이스 클래스를 기본으로 해서 엠프티 파일 에러를 디라이브드, 즉 파생 클래스로서 생성을 하는 과정을 보여드리고 내용도 별거 없습니다.
패스입니다.

그래서 엠프티 파일 에러는 결과적으로 익셉션이 가지고 있는 어트리뷰트라든지 또는 데이터 어트리뷰트나 메서드 어트리뷰트를 그대로 사용하고 있는 정도에 불과합니다.
다만 중요한 것은 사용자가 자기가 특정한 용도를 위해서 만들었다 하는 것입니다.
그다음에 트라이 부분으로 들어가겠습니다.
트라이 구문이 시작되고 있습니다.

오픈을 했습니다.
피플2.csv를 오픈을 했습니다.
그리고 잘 오픈이 됐는지 오픈드라는 프린트문을 찍어보고 그리고 렝스를 체크를 합니다.
렝스는 뭐죠?
더 파일이라고 하는 것, 그다음에 리드 라인스라고 하면 일단 리드 라인스는 파일 속에 들어 있는 모든 라인들을 다 읽어서 리스트 객체 또는 이터러블 객체로 만들어 줍니다.

이터러블 객체의 렝스라고 하면 이터러블 객체가 가지고 있는 아이템의 개수가 되는 것이죠.
이 개수가 하나일 때는 맨 앞에 있는 타이틀 라인이 들어 있는 상태가 될 것이고 두 개 이상일 때부터 실제 피플에 대한 정보가 들어 있게 되는 것이죠.
제로면 이 파일은 비어 있는 엠프티 파일이 되는 것입니다.
그러니까 2보다 작은 경우에는 이 파일은 정보가 채워져 있지 않거나 또는 비어 있는 파일이라고 간주할 수 있습니다.

새로운 파일을 또 생성을 시키겠습니다.
시키고 이름을 피플2.csv로 만들겠습니다.
이제 csv에 있는 이 내용을 그대로 카피를 해서 csv에 집어넣는데, 처음에는 다 주지는 않고 이렇게 한 줄만 주도록 하겠습니다.
주고 어떤 일이 벌어질까.
이런 경우에도 파일은 분명히 있어서 오픈하는 데는 문제는 없었지만 이건 쓸모없는 파일이죠.
누가 쓸모없다고 판단하죠?
사용자가 그렇게 판단을 하는 거죠.
실행을 시켜보겠습니다.

이제 피플2.csv가 오픈이 됐습니다.
시스템상에서는 에러를 발견하지 못했는데 피플2.csv 파일이 충분한 내용을 담고 있지 못하다는 예외가 발생한 거네요.
어디서 발생했을까요?
바로 이 부분에서.
라인 카운트를 헤아려봤더니 아까 헤더 라인 딱 한 줄만 넣은 상태로 피플2.csv를 만들었죠?
그래서 이 부분에서 오류가 난 것입니다.

여기에서 레이즈 엠프티 파일 에러가 발생했고 다시 익셉트 엠프티 파일 에러 쪽으로 캐치가 돼서 그것이 프린트문을 동작을 시키게 된 것입니다.
이런 상태에서는 엘스문은 동작을 할 수가 없었죠.
그렇지만 프로그램 던은 실행은 했습니다.
어떻든 이 프로그램은 끝까지 실행을 하고 종료를 한 것이죠.

또 한 번 정리를 한다면 사용자 예외라는 것은 클래스이고 그 클래스의 베이스 클래스는 익셉션으로부터 시작이 된다는 것을 기억해 주시면 지난 차시에 우리가 다루었던 클래스에 관한 지식을 잘 활용한다면 전혀 새로운 문제가 아니고 이미 여러분이 알고 있는 익숙한 문제로서 잘 쉽게 다룰 수 있으실 것입니다.

이렇게 이번 차시에는 프로그램이 동작을 하다 보면 여러 가지 이유로 많은 문제에 맞닥뜨리게 됩니다.
그 문제에 맞부딪혔을 때 오류의 문제처럼 프로그램이 죽어야 하는 경우도 있지만, 즉 신택스 에러라는 것은 더 이상 제고의 여지가 없는 것이거든요?
그때는 프로그램이 동작해서도 안 되는 것이죠.
잘못된 프로그램이기 때문에.

그렇지만 제대로 프로그램이 코딩이 된 상태라면 그 환경이 잘 맞지 않아서 또는 데이터가 잘 구비가 되지 않아서 프로그램이 죽는 경우도 또 생기게 됩니다.
그렇지만 이럴 때는 프로그램은 가급적이면 죽지 않고 끝까지 살아 있으면서 자기가 어떤 문제에 있는지, 어떤 상태에 있는지를 사용자에게 알려주고 거기에 대한 대처를 할 수 있도록 하는 것이, 그렇게 할 수 있는 프로그램을 만드는 것이 중요하다는 것이죠.

이럴 때 가장 흔하게 쓰는 것이 트라이 익셉트 엘스 파이널리 구문이 되는 것이고, 또 익셉트에 대한 예외들을 여러분 스스로가 적당한 상황에 맞는 예외들을 만들어내실 수도 있다는 점을 실습을 통해서 확인을 하셨습니다.
